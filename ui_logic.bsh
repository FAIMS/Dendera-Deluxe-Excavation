import android.util.Log;

/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

Object dialog;
String verb;
String archent_id;
Boolean isContext;
Boolean newContextGroupRel;
Boolean menu = true;
String moduleYear = new java.text.SimpleDateFormat("yy").format(new Date());
String moduleSiteCode = "BK" + moduleYear;

// TODO: determine what the intended text is for these web views, as they still use old text or text copied from PAZC.
// String WEB_REL_1 = "{useToRelate} {Contexts}, eg '{Esta_encima_de}' & '{Esta_debajo_de}'. {selectReln} {Context} {clickButtonRelate} {Contexts}'.";
String WEB_REL_1 = "<p style=\"color:#33b5e5\">Use this tab to enter relationships between features. You can record several relationship types, including using standard Harris matrix terms, physical and stratigraphical relationships as in the Boncuklu recording guide. Select the type of relationship in the middle, the specified context on the right and click the button 'Relate Features' to record the relationship.</p>";
String WEB_REL_2 = "<p style=\"color:#33b5e5\">{toLoadRemove} {Contexts}, {tapOne}</p>";
String WEB_REL_3 = "<p style=\"color:#33b5e5\">{useToRelate} {ContextGroups}. {selectReln} {ContextGroup} {clickButtonRelate} {ContextGroups}'.</p>";
String WEB_REL_4 = "<p style=\"color:#33b5e5\">{toLoadRemove} {ContextGroups}, {tapOne}</p>";
String WEB_REL_5 = "<p style=\"color:#33b5e5\">Use this tab to add a {Context} to the {ContextGroup}.</p>";
String WEB_REL_SELECTED_NONE = "<i>{none}</i>";
String WEB_WARN_ART_ID = "<p style=\"color:#f00\">Beware that Artefact ID is not auto-generated. Ensure you fill it in correctly.</p>";

guideFile = getAttachedFilePath("files/data/guide/guidePureHtml.html");
populateWebView    ("user/help/guide", guideFile);
populateWebViewHtml("Context/Context_Relationships_to_Other_Contexts/spacer", WEB_REL_1);
populateWebViewHtml("Context/Context_Relationships_to_Other_Contexts/help", WEB_REL_2);
populateWebViewHtml("ContextGroup/Feature_Relationships_to_Other_Features/spacer", WEB_REL_3);
populateWebViewHtml("ContextGroup/Feature_Relationships_to_Other_Features/help", WEB_REL_4);
populateWebViewHtml("ContextGroup/ContextGroup_Contexts/spacer", WEB_REL_5);
populateWebViewHtml("Special_Find/Special_Find_GeneralInformation/warn", WEB_WARN_ART_ID);

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);", null);
    fetchOne("DROP VIEW IF EXISTS parentchild;", null);
    fetchOne( "CREATE VIEW parentchild AS "+
            "  SELECT parent.uuid as parentuuid, child.uuid as childuuid, parent.participatesverb as parentparticipatesverb, parent.relationshipid, parent.aenttypename as parentaenttypename, child.participatesverb as childparticipatesverb "+
            "    FROM (SELECT uuid, participatesverb, aenttypename, relationshipid"+
            "            FROM latestnondeletedaentreln "+
            "            JOIN relationship USING (relationshipid) "+
            "            JOIN latestnondeletedarchent USING (uuid) "+
            "            JOIN aenttype USING (aenttypeid)) parent "+
            "    JOIN (SELECT uuid, relationshipid, participatesverb "+
            "            FROM latestnondeletedaentreln "+
            "            JOIN relationship USING (relationshipid)) child "+
            "      ON (parent.relationshipid = child.relationshipid AND parent.uuid != child.uuid);", null);
}

makeLocalID();

//showWarning("Boncuklu Excavation 2014", "This module was generated by the FAIMS Team for the University of Queensland and Andrew Fairbairn under the auspices of an Australian Research Council LIEF grant.");

/* `ref`  is a reference/path to a field
 * `name` is a human-readable name for that field
 * `cond` is a String containing a boolean expression that evaluates to true if
 *        and only if the the field pair returned by this function should be
 *        validated.
 *
 *  Returns a field pair (really just an ArrayList).
 */
fieldPair(String ref, String name, String cond) {
    List fp = new ArrayList();
    fp.add(ref);
    fp.add(name);
    fp.add(cond);
    return fp;
}

fieldPair(String ref, String name) {
    String t = "true";
    return fieldPair(ref, name, t);
}

/* Returns true if field specified by `ref` is valid. False otherwise.
 */
isValidField(String ref) {
    return !isNull(getFieldValue(ref));
}
/* `format` can either be HTML or PLAINTEXT
 */
validateFields(List fields, String format) {
    Integer numInvalid = 0;

    /* Build validation message string (and count how many invalid fields exist) */
    String out = "Please fill out the following fields:\n";
    for(f : fields) {
        String ref  = f.get(0); // Reference to field
        String name = f.get(1); // Human-readable name
        String cond = f.get(2); // Validation condition

        // Only validate a field whose validation condition evaluates to `true`
        Boolean doValidateField = (Boolean) eval(cond);
        if (!doValidateField)
            continue;

        // Add any invalid fields to the output and tally them
        if (!isValidField(ref)) {
            out += "- " + name + "\n";
            numInvalid++;
        }
    }
    // All the fields are valid; just overwrite `out` with a cheery message
    if (numInvalid == 0)
        out = "All fields contain valid data!";

    /* Format the output as dictated by `format` */
    if (format == "HTML") {
        out = out.replace("\n", "<br>");
    } else if (format == "PLAINTEXT") {
        ;
    }

    return out;
}
validateFields(List fields, String htmlViewPath, Boolean showWarning) {
    if (showWarning) {
      String validationMessagePlain = validateFields(fields, "PLAINTEXT");
      showWarning("Validation_Results" , validationMessagePlain);
    }
    String validationMessageHtml  = validateFields(fields, "HTML");
    populateWebViewHtml(htmlViewPath , validationMessageHtml);
}

validateContextTabGroup() {
    Boolean showWarning = true;
    validateContextTabGroup(showWarning);
}

/** Fetches the contents of a specifed vocabulary and stores it in the given list. **/
fetchVocabulary(String vocabName, List storageList) {
    fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = '" + vocabName + "';", new FetchCallback() {
        onFetch(result) {
            storageList.addAll(result);
        }
    });
}

vocabNameToVocabId(List vocab, String name) {
    for (v : vocab) {
        String vocabId   = v.get(0);
        String vocabName = v.get(1);
        if (vocabName.equals(name))
            return vocabId;
    }
    return null;
}

/* Returns true if `vocabName` is the value selected in the <select1> at `ref`.
 */
isSelected(String ref, List vocab, String vocabName) {
    String vocabId       = vocabNameToVocabId(vocab, vocabName);
    String vocabIdActual = getFieldValue(ref);
    if (isNull(vocabIdActual))
        return isNull(vocabId);
    return vocabIdActual.equals(vocabId);
}

validateContextTabGroup(Boolean showWarning) {
    List f = new ArrayList(); // fields to be validated

    // General information
    f.add(fieldPair("Context/Context_GeneralInformation/Area_Code"             , "{Trench}"));
    f.add(fieldPair("Context/Context_GeneralInformation/Context_ID"            , "{Context_ID}"));
    f.add(fieldPair("Context/Context_GeneralInformation/Location_Note"         , "{Location_Note}"));
    f.add(fieldPair("Context/Context_GeneralInformation/Excavation_Method"     , "{Excavation_Method}"));
    f.add(fieldPair("Context/Context_GeneralInformation/Context_Type"          , "{Context_Type}"));
    f.add(fieldPair("Context/Context_GeneralInformation/Plans"                 , "{Plans}"));
    f.add(fieldPair("Context/Context_GeneralInformation/Section_Numbers"       , "{Section_Numbers}"));
    // Measure
    f.add(fieldPair("Context/Context_Measure/Context_Highest_Level" , "{Context_Highest_Level}"));
    f.add(fieldPair("Context/Context_Measure/Context_Lowest_Level"  , "{Context_Lowest_Level}"));
    f.add(fieldPair("Context/Context_Measure/Length"                , "{Length}"));
    f.add(fieldPair("Context/Context_Measure/Width"                 , "{Width}"));
    f.add(fieldPair("Context/Context_Measure/Depth"                 , "{Depth}"));
    f.add(fieldPair("Context/Context_Measure/Volume"                , "{Volume}"));

    String condCut        = "isSelected(\"Context/Context_GeneralInformation/Context_Type\", CONTEXT_TYPE_VOCAB, \"{Cut}\")";
    String condDeposit    = "isSelected(\"Context/Context_GeneralInformation/Context_Type\", CONTEXT_TYPE_VOCAB, \"{Deposit}\")";
    String condSkeleton   = "isSelected(\"Context/Context_GeneralInformation/Context_Type\", CONTEXT_TYPE_VOCAB, \"{Skeleton}\")";
    String condStructures = "isSelected(\"Context/Context_GeneralInformation/Context_Type\", CONTEXT_TYPE_VOCAB, \"{Structure}\")";
    // Cut
    f.add(fieldPair("Context/Context_Cuts/Your_Interpretation"               , "{Your_Interpretation}"   , condCut));
    f.add(fieldPair("Context/Context_Cuts/Shape_of_Cut"                      , "{Shape_of_Cut}"          , condCut));
    f.add(fieldPair("Context/Context_Cuts/Shape_of_Corners"                  , "{Shape_of_Corners}"      , condCut));
    f.add(fieldPair("Context/Context_Cuts/Shape_of_Base"                     , "{Shape_of_Base}"         , condCut));
    f.add(fieldPair("Context/Context_Cuts/Break_of_Slope_Top"                , "{Break_of_Slope_Top}"    , condCut));
    f.add(fieldPair("Context/Context_Cuts/Sides_of_Cut"                      , "{Sides_of_Cut}"          , condCut));
    f.add(fieldPair("Context/Context_Cuts/Cut_Function"                      , "{Cut_Function}"          , condCut));
    f.add(fieldPair("Context/Context_Cuts/Orientation"                       , "{Orientation}"           , condCut));
    f.add(fieldPair("Context/Context_Cuts/Inclination_of_axis"               , "{Inclination_of_axis}"   , condCut));
    // Deposit
    f.add(fieldPair("Context/Context_Deposits/Your_Interpretation"           , "{Your_Interpretation}"   , condDeposit));
    f.add(fieldPair("Context/Context_Deposits/Soil_Compaction_Type"          , "{Soil_Compaction_Type}"  , condDeposit));
    f.add(fieldPair("Context/Context_Deposits/Soil_Texture"                  , "{Soil_Texture}"          , condDeposit));
    f.add(fieldPair("Context/Context_Deposits/Composition_Type"              , "{Composition_Type}"      , condDeposit));
    f.add(fieldPair("Context/Context_Deposits/Deposit_Bedding"               , "{Deposit_Bedding}"       , condDeposit));
    f.add(fieldPair("Context/Context_Deposits/Deposit_Inclusions"            , "{Deposit_Inclusions}"    , condDeposit));
    // Skeleton
    f.add(fieldPair("Context/Context_Skeletons/Skeleton_Head"                , "{Skeleton_Head}"         , condSkeleton));
    f.add(fieldPair("Context/Context_Skeletons/Skeleton_Body"                , "{Skeleton_Body}"         , condSkeleton));
    f.add(fieldPair("Context/Context_Skeletons/Skeleton_Left_Arm"            , "{Skeleton_Left_Arm}"     , condSkeleton));
    f.add(fieldPair("Context/Context_Skeletons/Skeleton_Right_Arm"           , "{Skeleton_Right_Arm}"    , condSkeleton));
    f.add(fieldPair("Context/Context_Skeletons/Skeleton_Left_Leg"            , "{Skeleton_Left_Leg}"     , condSkeleton));
    f.add(fieldPair("Context/Context_Skeletons/Skeleton_Right_Leg"           , "{Skeleton_Right_Leg}"    , condSkeleton));
    f.add(fieldPair("Context/Context_Skeletons/Skeleton_Condition"           , "{Skeleton_Condition}"    , condSkeleton));
    f.add(fieldPair("Context/Context_Skeletons/Skeleton_Days_Exposed"        , "{Skeleton_Days_Exposed}" , condSkeleton));
    f.add(fieldPair("Context/Context_Skeletons/Target_A_X"                   , "{Target_A_X}"            , condSkeleton));
    f.add(fieldPair("Context/Context_Skeletons/Target_A_Y"                   , "{Target_A_Y}"            , condSkeleton));
    // Structures
    f.add(fieldPair("Context/Context_Structures/Your_Interpretation"         , "{Your_Interpretation}"   , condStructures));
    f.add(fieldPair("Context/Context_Structures/Structure_Description"       , "{Structure_Description}" , condStructures));

    // Interpretation
    f.add(fieldPair("Context/Context_Interpretation/Your_description" , "{Your_description}"));
    f.add(fieldPair("Context/Context_Interpretation/Your_Discussion"  , "{Your_Discussion}"));

    validateFields(f, "Context/Context_Validation/validationResults" , showWarning);
}

onEvent("Context/Context_GeneralInformation/validate" , "delayclick" , "showTab(\"Context/Context_Validation\")");
onEvent("Context/Context_Validation"                  , "show"       , "validateContextTabGroup(false)");
onEvent("Context"                                     , "show"       , "validateContextTabGroup(false)");

validateContextGroupTabGroup() {
    Boolean showWarning = true;
    validateFeatureTabGroup(showWarning);
}

validateContextGroupTabGroup(showWarning) {
    List f = new ArrayList();

    f.add(fieldPair("ContextGroup/ContextGroup_Details/Area_Code"               , "{Trench}"));
    f.add(fieldPair("ContextGroup/ContextGroup_Details/Context_Group_ID"        , "{Context_Group_ID}"));
    f.add(fieldPair("ContextGroup/ContextGroup_Details/Title"                   , "{Title}"));
    f.add(fieldPair("ContextGroup/ContextGroup_Details/Context_Type"            , "{Context_Group} Type"));
    f.add(fieldPair("ContextGroup/ContextGroup_Details/CG_Your_description"     , "{CG_Your_description}"));
    f.add(fieldPair("ContextGroup/ContextGroup_Details/CG_Your_Interpretation"  , "{CG_Your_Interpretation}"));
    f.add(fieldPair("ContextGroup/Feature_Relationships_to_Other_Features/reln" , "Relationship"));

    validateFields(f , "ContextGroup/ContextGroup_Validation/validationResults" , showWarning);
}

onEvent("ContextGroup/ContextGroup_Details/validate" , "delayclick" , "showTab(\"ContextGroup/ContextGroup_Validation\")");
onEvent("ContextGroup/ContextGroup_Validation"       , "show"       , "validateContextGroupTabGroup(false)");
onEvent("ContextGroup"                               , "show"       , "validateContextGroupTabGroup(false)");

validateSamplesTabGroup() {
    Boolean showWarning = true;
    validateFeatureTabGroup(showWarning);
}

validateSamplesTabGroup(showWarning) {
    List f = new ArrayList();

    f.add(fieldPair("Sample/Sample_GeneralInformation/Context_ID",  "{Context_ID}"));
    f.add(fieldPair("Sample/Sample_GeneralInformation/Sample_ID",   "{Sample_ID}"));
    f.add(fieldPair("Sample/Sample_GeneralInformation/Sample_Type", "{Sample_Type}"));
    f.add(fieldPair("Sample/Sample_GeneralInformation/X", "X"));
    f.add(fieldPair("Sample/Sample_GeneralInformation/Y", "Y"));
    f.add(fieldPair("Sample/Sample_GeneralInformation/Z", "Z"));

    validateFields(f , "Sample/Sample_Validation/validationResults" , showWarning);
}

onEvent("Sample/Sample_GeneralInformation/validate" , "delayclick" , "showTab(\"Sample/Sample_Validation\")");
onEvent("Sample/Sample_Validation"                  , "show"       , "validateSamplesTabGroup(false)");
onEvent("Sample"                                    , "show"       , "validateSamplesTabGroup(false)");

validateSpecialFindTabGroup() {
    Boolean showWarning = true;
    validateSpecialFindTabGroup(showWarning);
}

validateSpecialFindTabGroup(showWarning) {
    List f = new ArrayList();

    f.add(fieldPair("Special_Find/Special_Find_GeneralInformation/Special_Find_ID"          , "{Special_Find} ID"));
    f.add(fieldPair("Special_Find/Special_Find_GeneralInformation/Special_Find_Description" , "{Special_Find} Description"));
    f.add(fieldPair("Special_Find/Special_Find_GeneralInformation/X"                        , "X"));
    f.add(fieldPair("Special_Find/Special_Find_GeneralInformation/Y"                        , "Y"));
    f.add(fieldPair("Special_Find/Special_Find_GeneralInformation/Z"                        , "Z"));

    validateFields(f , "Special_Find/Special_Find_Validation/validationResults" , showWarning);
}

onEvent("Special_Find/Special_Find_GeneralInformation/validate" , "delayclick" , "showTab(\"Special_Find/Special_Find_Validation\")");
onEvent("Special_Find/Special_Find_Validation"       , "show"       , "validateSpecialFindTabGroup(false)");
onEvent("Special_Find"                               , "show"       , "validateSpecialFindTabGroup(false)");

/*
 * If value of field specified by `ref` is null, sets the field to `defaultVal`,
 * otherwise increments its value.
 *
 * Returns the value the field was updated to.
 */
incField(String ref, Integer defaultVal) {
    String val = getFieldValue(ref);

    if (isNull(val)) {
        setFieldValue(ref, defaultVal);
        return defaultVal;
    }

    Integer inc = Integer.parseInt(val) + 1;
    setFieldValue(ref, inc);
    insertIntoLocalSettings(ref, inc.toString());

    return inc;
}

/* Increments the field at `ref` or returns null if it does not contain a
 * number.
 */
incField(String ref) {
    return incField(ref, null);
}

/*** control ***/
onEvent("control"                     , "load"      , "loadControlSettings()");
onEvent("control"                     , "show"      , "removeNavigationButtons(); setSearchAreaCode();");
onEvent("control/data"                , "show"      , "refreshEntities(); updateGPSDiagnostics();");
onEvent("control/data/newContext"     , "delayclick", "newContext();");
onEvent("control/data/newContextGroup", "delayclick", "newContextGroup(true);");
onEvent("control/data/newDiary"       , "delayclick", "newDiary()");
onFocus("control/data/teamMembers"    , null        , "insertIntoLocalSettings(\"teamMembers\", getFieldValue(\"control/data/teamMembers\"))");
onEvent("control/search"              , "show"      , "search();");
onEvent("control/search/Search"       , "click"     , "clearSearch()");
onEvent("control/search/searchButton" , "click"     , "search()");
onEvent("control/search/entityTypes"  , "click"     , "search()");
onEvent("control/search/Area_Code"    , "click"     , "search()");
onEvent("control/search/entityList"   , "click"     , "loadEntity();");

loadControlSettings() {
    fetchOne("SELECT value FROM localSettings WHERE key = 'teamMembers';", new FetchCallback() {
        onFetch(result) {
            if (!isNull(result)) {
                setFieldValue("control/data/teamMembers", result.get(0));
            }
        }
    });
    loadStartingIds();
}

loadStartingIds() {
    // This function should only be called once since it creates event handlers, otherwise multiple copies of the same handler will trigger with the event.
    List l = new ArrayList();
    l.add("control/data/ContextIncrement");
    l.add("control/data/ContextGroup_Starting_ID");
    l.add("control/data/Sample_Starting_ID");

    for (ref : l) {
        loadStartingId(ref);
    }
    for (ref : l) {
        onFocus(ref, null,  "insertIntoLocalSettings(\"" + ref + "\", getFieldValue(\"" + ref + "\"));");
    }
}

loadStartingId(String ref) {
    String idQ = "SELECT value FROM localSettings WHERE key = '" + ref + "';";
    fetchOne(idQ, new FetchCallback() {
        onFetch(result) {
            if (!isNull(result)) {
                setFieldValue(ref, result.get(0));
            } else {
                setFieldValue(ref, "1");
            }
        }
    });
}

setSearchAreaCode() {
    setFieldValue("control/search/Area_Code", getFieldValue("user/usertab/Area_Code"));
}

clearSearch(){
    setFieldValue("control/search/Search","");
}

refreshEntities() {
    context_id = null;
    context_group_id = null;
    menu = false;
}

search(){
    String type = getFieldValue("control/search/entityTypes");
    String areaCode = getFieldValue("control/search/Area_Code");
    String term = getFieldValue("control/search/Search");
    String searchQuery = "SELECT uuid, response "+
                         "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
                         " WHERE uuid in (SELECT uuid "+
                         "                    FROM latestNonDeletedArchEntIdentifiers "+
                         "                   WHERE attributename != 'Site Code' "+
                         "                     AND measure LIKE '"+term+"'||'%'  "+
                         "                     AND ( aenttypename LIKE '"+type+"' OR 'All' = '"+type+"' ) "+                         
                         "                  )  "+
                         "   AND (   'null' = '"+areaCode+"'  "+
                         "        OR uuid in (SELECT uuid "+
                         "                     FROM latestnondeletedaentvalue  "+
                         "                     JOIN attributekey using (attributeid) "+
                         "                    WHERE attributename = 'AreaCode' "+
                         "                      AND vocabid = '"+areaCode+"') "+
                         "       ) "+
                         " ORDER BY response "+
                         " LIMIT ? "+
                         "OFFSET ? ";
                  

    populateCursorList("control/search/entityList", searchQuery, 25);
    refreshTabgroupCSS("control");
    Log.d("Boncuklu Module", "Search query: " + searchQuery);
}

entityTypes = new ArrayList();
entityTypes.add(0, new NameValuePair("{All}", "All"));
entityTypes.add(new NameValuePair("{Context}", "Context"));
entityTypes.add(new NameValuePair("{Context_Group}", "Context Group"));
entityTypes.add(new NameValuePair("{Diary}", "Diary"));
entityTypes.add(new NameValuePair("{Sample}", "Sample"));
entityTypes.add(new NameValuePair("{Special_Find}", "Special Find"));
entityTypes.add(new NameValuePair("{Photograph_Log}", "Photograph Log"));
//entityTypes.add(new NameValuePair("{Height}", "Height"));
populateDropDown("control/search/entityTypes", entityTypes);

loadEntity() {
  loadEntityFrom(getListItemValue());
}

loadEntityFrom(String entityID) {
  if (!isNull(entityID)) {
    fetchAll("select aenttypename from latestnondeletedarchent join aenttype using (aenttypeid) where uuid = '" + entityID + "';", new FetchCallback() {
      onFetch(result) {
        String name = result.get(0).get(0);
        if (name.equals("Context")) {
          loadContextFrom(entityID);
        } else if (name.equals("Legacy")) {
          showWarning("{Alert}", "{This_is_a_legacy_identifier_and_is_not_viewable_on_the_device}");
        } else if (name.equals("Context Group")) {
          loadContextGroupFrom(entityID);
        } else if (name.equals("Diary")) {
            loadDiaryFrom(entityID);
        } else if (name.equals("Sample")) {
          loadSampleFrom(entityID);
        } else if (name.equals("Special Find")) {
          loadSpecialFindFrom(entityID);
        } else if (name.equals("Photograph Log")) {
          loadPhotoLogFrom(entityID);
        } else if (name.equals("Height")) {
          loadHeightFrom(entityID);
        }
      }
    });
  } else {
    Log.e("PAZC Module", "Cannot load an entity with a null ID.");
  }
}

/*** ArchEnt: Height ***/
onEvent("Height", "show", "addNavigationButtons(\"Height\"); keepTabGroupChanges(\"Height\"); saveHeight(); refreshTabgroupCSS(\"Height\");");

String height_id = null;

newHeight() {
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("{Error}", "{Cannot_save_record_without_id}");
        return;
    }
    if (isNull(context_id)){
        showToast("{You_must_save_a_context_first}");
        return;
    }
    height_id = null;
    newTabGroup("Height");
}

loadHeight() {
    height_id = getListItemValue();
    loadHeightFrom(height_id); 
}

loadHeightFrom(String heightID) {
    height_id = heightID;
    if (isNull(height_id)) return;
    showTabGroup("Height", height_id);
}

saveHeight() {
    saveHeight(null);
}

saveHeight(String callback) {
    Boolean enable_autosave = true;
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("AreaCode", null, getFieldValue("Context/Context_GeneralInformation/Area_Code"), null, null));
    attributes.add(createEntityAttribute("Context ID", null, null, getFieldValue("Context/Context_GeneralInformation/Context_ID"), null));
    print(context_id);
    print(height_id);
    saveTabGroup("Height", height_id, null, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            height_id = uuid;
            if (newRecord) {
                saveEntitiesToRel("ContextHeight", context_id, height_id);
                showToast("{Associated_with} {Context}");
            }
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

deleteHeight() {
    if (!isNull(height_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this} {Height}", "reallyDeleteHeight()", "doNotDelete()");
    } else {
        cancelTabGroup("Height", true);
    }
}

reallyDeleteHeight() {
    deleteArchEnt(height_id);
    cancelTabGroup("Height", false);
}

doNotDelete(){
  showToast("{Delete_Cancelled}");
}

loadHeightAttributes() {
    
}

/*** ArchEnt: Diary **/
onEvent("Diary", "show", "addNavigationButtons(\"Diary\"); keepTabGroupChanges(\"Diary\"); saveDiary(); refreshTabgroupCSS(\"Diary\");");
onEvent("Diary/Diary/attachPhoto", "click", "attachPictureTo(\"Diary/Diary/Photo\")");
onEvent("Diary/Diary/attachAudio", "click", "attachAudioTo(\"Diary/Diary/Audio\")");
onEvent("Diary/Diary/attachVideo", "click", "attachVideoTo(\"Diary/Diary/Video\")");
onEvent("Diary/Diary/attachSketch", "click", "attachFileTo(\"Diary/Diary/Sketch\")");
onEvent("Diary/Diary/viewattached", "click", "viewArchEntAttachedFiles(diary_id)");

String diary_id = null;

newDiary() {
    diary_id = null;
    newTabGroup("Diary");
    setMonthDay("Diary/Diary/Timestamp");
    setFieldValue("Diary/Diary/CreatedBy", username);
    setFieldValue("Diary/Diary/Area_Code", getFieldValue("user/usertab/Area_Code"));
    keepTabGroupChanges("Diary");
}

loadDiary() {
    diary_id = getListItemValue();
    loadDiaryFrom(diary_id);  
}

loadDiaryFrom(String diaryID) {
    diary_id = diaryID;
    if (isNull(diary_id)) return;
    showTabGroup("Diary", diary_id);
}

saveDiary() {
    saveDiary(null);
}

saveDiary(String callback) {
    Boolean enable_autosave = true;
    attributes = createAttributeList();
    // attributes.add(createEntityAttribute("Site Code", null, null, moduleSiteCode, null));
    saveTabGroup("Diary", diary_id, null, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            diary_id = uuid;
            if (!isNull(callback)) {
                execute(callback);
            }
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

deleteDiary(){
    if (!isNull(diary_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Diary}", "reallyDeleteDiary()", "doNotDelete()");
    } else {
        cancelTabGroup("Diary", true);
    }
}

reallyDeleteDiary(){
    deleteArchEnt(diary_id);
    cancelTabGroup("Diary", false);
}

doNotDelete(){
  showToast("{Delete_Cancelled}");
}

loadDiaryAttributes() {
    makeVocab("DropDown", "Diary/Diary/Area_Code", "AreaCode");
}

/*** ArchEnt: Context **/
onEvent("Context", "show", "setContextCreatingDateUser(); addNavigationButtons(\"Context\"); openContextTabs(); keepTabGroupChanges(\"Context\"); saveContext(\"\");refreshTabgroupCSS(\"Context\");");
onEvent("Context", "load", "showTab(\"Context/Context_Deposits\");");
onEvent("Context", "load", "showTab(\"Context/Context_Cuts\");");
onEvent("Context", "load", "showTab(\"Context/Context_Structures\");");

onEvent("Context/Context_GeneralInformation/Details","click","openContextTabs()");
onEvent("Context/Context_GeneralInformation/Add_Date_Closed", "click", "addCloseDate()");

onEvent("Context/Context_Measure", "show", "updateAllContextHeights()");
onEvent("Context/Context_Measure/Add_Height", "delayclick", "newHeight()");
onEvent("Context/Context_Measure/Height_List", "click", "loadHeight()");

onEvent("Context/Texture_Helper/Update_Texture", "click", "setTextureActual()");

onEvent("Context/Context_Deposits/Texture_Helper", "click", "helpSetTextureActual()");

onEvent("Context/Context_Structures/Deposit", "click", "showTab(\"Context/Context_Deposits\")");

onEvent("Context/Context_Feature", "show", "updateAllContextGroups()");
onEvent("Context/Context_Feature/AddContextGroup", "click", "newContextGroup(false);newContextGroupRel = true;");
onEvent("Context/Context_Feature/ShowContextGroup", "click", "loadContextGroupFromContext();newContextGroupRel = false;");
onEvent("Context/Context_Feature/RemoveFromContextGroup", "click", "removeContextGroupReln()");

onEvent("Context/Context_Attachments", "show", "updateAllContextPhotologs()");
onEvent("Context/Context_Attachments/newPhotoLog", "click", "newPhotoLog();verb=\"ContextPhotographLog\";archent_id=context_id;isContext=true;");
onEvent("Context/Context_Attachments/loadPhotoLog", "click", "loadPhotoLog();verb=\"ContextPhotographLog\";archent_id=context_id;isContext=true");
onEvent("Context/Context_Attachments/attachPhoto", "click", "attachPictureTo(\"Context/Context_Attachments/Photo\")");
onEvent("Context/Context_Attachments/attachAudio", "click", "attachAudioTo(\"Context/Context_Attachments/Audio\")");
onEvent("Context/Context_Attachments/attachVideo", "click", "attachVideoTo(\"Context/Context_Attachments/Video\")");
onEvent("Context/Context_Attachments/attachSketch", "click", "attachFileTo(\"Context/Context_Attachments/Sketch\")");
onEvent("Context/Context_Attachments/viewattached", "click", "viewArchEntAttachedFiles(context_id)");

onEvent("Context/Context_Artefacts", "show", "updateAllContextArtefacts()");
onEvent("Context/Context_Artefacts/newSpecialFind"    , "delayclick" , "newSpecialFind();");
onEvent("Context/Context_Artefacts/specialFindList"   , "click"      , "loadSpecialFind()");

onEvent("Context/Context_Samples", "show", "updateAllContextSamples()");
onEvent("Context/Context_Samples/newSample", "delayclick", "newSample()");
onEvent("Context/Context_Samples/sampleList", "click", "loadSample();");

onEvent("Context/Context_Relationships_to_Other_Contexts", "show", "updateContextIdentifier(); updateContextRelationshipTargetArea(); updateRelns();");
onEvent("Context/Context_Relationships_to_Other_Contexts/Populate_Target_Context", "delayclick", "updateAllContextRelationships(); populateWebViewHtml(\"Context/Context_Relationships_to_Other_Contexts/selectedEnt\", WEB_REL_SELECTED_NONE);");
onEvent("Context/Context_Relationships_to_Other_Contexts/createLegacy", "delayclick", "showTextAlert(\"Alert\", \"Legacy identifier:\", \"legacyTextInput()\",  null)");
onEvent("Context/Context_Relationships_to_Other_Contexts/relate", "delayclick", "makeHierReln()");
onEvent("Context/Context_Relationships_to_Other_Contexts/showReln", "click", "loadContextFromReln()");
onEvent("Context/Context_Relationships_to_Other_Contexts/deleteReln", "delayclick", "deleteReln()");
onEvent("Context/Context_Relationships_to_Other_Contexts/listOfRelns", "click", "selectAssociatedEntityContext()");

legacyTextInput() {
  String legacyID = getLastTextAlertInput();
  Log.d("PAZC 2.0 Module", "Legacy ID: " + legacyID);
  List attributes = createAttributeList();
  attributes.add(createEntityAttribute("LegacyIdentifier", null, null, legacyID, null));
  saveArchEnt(null, "Legacy", null, attributes, new SaveCallback() {
    onSave(uuid, newRecord){
      if (newRecord) {
        setContextCreatingDateUser();
        showToast("Created legacy with identifier: " + legacyID);
      }
    }
  });
}

setContextCreatingDateUser() {
    if (isNull(context_id)) return;
    String creatingUserDateQuery = "select createdBy, createdAt from createdModifiedAtBy where uuid = '"+context_id+"';";
    fetchOne(creatingUserDateQuery, new FetchCallback() {
        onFetch(result) {
            Log.d("Boncuklu Module", "Results for Created at, Modified by: " + result.toString());
            setFieldValue("Context/Context_GeneralInformation/CreatingUser", result.get(0));
            setFieldValue("Context/Context_GeneralInformation/CreatingDate", result.get(1));
        }
    });
}

String context_id = null;

newContext(){
    String contextIncrement = getFieldValue("control/data/ContextIncrement");
    if (isNull(contextIncrement)) {
        showWarning("{Alert}","{No_starting_ID_is_entered_please_enter_one}");
        return;
    }

    context_id = null;
    newTabGroup("Context");

    fetchOne("REPLACE INTO localSettings(key, value) VALUES('contextIncrement', '" + contextIncrement + "');", null);

    setFieldValue("Context/Context_GeneralInformation/Context_ID", contextIncrement);
    setTimestamp("Context/Context_GeneralInformation/Date_Opened");
    setFieldValue("Context/Context_GeneralInformation/Area_Code", getFieldValue("user/usertab/Area_Code"));
    setFieldValue("Context/Context_GeneralInformation/CreatingUser", username);
    setFieldValue("Context/Context_GeneralInformation/Excavators", getFieldValue("control/data/teamMembers"));
    keepTabGroupChanges("Context");

    incField("control/data/ContextIncrement", 1);
    setTimestamp("Context/Context_GeneralInformation/CreatingDate");
}

loadContext() {
    context_id = getListItemValue();
    loadContextFrom(context_id);    
}

loadContextFrom(contextid) {
    context_id = contextid;
    if (isNull(context_id)) return;
    
    showTabGroup("Context", context_id, new FetchCallback() {
      onFetch(result) {
        openContextTabs(true);
      }
    });
}

saveContext(String callback) {
    Boolean enable_autosave = true;
    attributes = createAttributeList();
    attributes.add(createEntityAttribute("Site Code", null, null, moduleSiteCode, null));
    attributes.add(createEntityAttribute("Device Code", null, getFieldValue("user/usertab/Device_Code"), null, null));
    saveTabGroup("Context", context_id, null, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            context_id = uuid;
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

deleteContext(){
    if (!isNull(context_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Context}", "reallyDeleteContext()", "doNotDelete()");
    } else {
        cancelTabGroup("Context", true);
    }
}

reallyDeleteContext(){
    deleteArchEnt(context_id);
    cancelTabGroup("Context", false);
}

doNotDelete(){
    showToast("{Delete_Cancelled}");
}

loadContextFromReln(){
    String childuuid = selectedEntityIdentifer;
    if (!isNull(childuuid)){
        loadEntityFrom(childuuid);
        
    } else {
        showWarning("{Nothing_Selected}", "{Please_select_a_child_entity_in_the_list}");
    }
}

deleteReln(){
    String childuuid = selectedEntityIdentifer;
    if (!isNull(childuuid)){

        String relationshipidQuery = "select relationshipid from parentchild where parentuuid = '"+context_id+"' and childuuid = '"+childuuid+"';";
        fetchOne(relationshipidQuery, new FetchCallback() {
          onFetch(result) {
            String deletequery = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) SELECT uuid, relationshipid, 'true', participatesverb, '"+userid+"' FROM latestnondeletedaentreln WHERE relationshipid = '"+result.get(0)+"';";
            fetchOne(deletequery, null);
            deleteRel(result.get(0));
            populateWebViewHtml("Context/Context_Relationships_to_Other_Contexts/selectedEnt", WEB_REL_SELECTED_NONE);
            selectedEntityIdentifer = null;
            updateRelns();
          }
        });        
    } else {
      showWarning("{Nothing_Selected}", "{Please_select_a_child_entity_in_the_list}");
    }
}

updateContextRelationshipTargetArea() {
    setFieldValue("Context/Context_Relationships_to_Other_Contexts/Target_Area", getFieldValue("Context/Context_GeneralInformation/Area_Code"));
    populateWebViewHtml("Context/Context_Relationships_to_Other_Contexts/selectedEnt", WEB_REL_SELECTED_NONE);

}

updateContextIdentifier(){
    if (!isNull(context_id)){
        fetchOne("select response from latestNonDeletedArchEntFormattedIdentifiers where uuid = '"+context_id+"';", new FetchCallback() {
          onFetch(result) {
            if (!isNull(result)){
                setFieldValue("Context/Context_Relationships_to_Other_Contexts/context_id", result.get(0));
            }
          }
        });    
    } else {
        showToast("{pleaseSave} {Context} {beforeThisTab}.");
    }
}

updateContextRelationshipBasedCursorList(path, relntypename, uuid){
    String query = "" +
        "SELECT childuuid, response "+
        "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) "+
        "  JOIN createdmodifiedatby USING (uuid) "+
        " WHERE relationshipid in (SELECT relationshipid  "+
        "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  "+
        "                           WHERE relntypename = '"+relntypename+"') "+
        "   AND parentuuid = "+uuid+" "+
        "   AND parentaenttypename = 'Context' "+
        " ORDER BY createdat desc " +
        " LIMIT ? OFFSET ?; ";

    populateCursorList(path, query, 25);
}

updateContextRelationshipBasedDropdown(path, relntypename, uuid){
    if (!isNull(context_id)){
        fetchAll("SELECT childuuid, response "+
                 "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) "+
                 "  JOIN createdmodifiedatby USING (uuid) "+
                 " WHERE relationshipid in (SELECT relationshipid  "+
                 "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  "+
                 "                           WHERE relntypename = '"+relntypename+"') "+
                 "   AND parentuuid = "+uuid+" "+
                 "   AND parentaenttypename = 'Context' "+
                 " ORDER BY createdat desc; "+
                 "",

        new FetchCallback() {
          onFetch(result) {
            populateDropDown(path, result);

          }
        });
    }
}

updateNonContextRelationshipBasedDropdown(path, relntypename, parentaenttypename, uuid){
    if (!isNull(uuid)){
        fetchAll("SELECT childuuid, response "+
                 "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) "+
                 "  JOIN createdmodifiedatby USING (uuid) "+
                 " WHERE relationshipid in (SELECT relationshipid  "+
                 "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  "+
                 "                           WHERE relntypename = '"+relntypename+"') "+
                 "   AND parentuuid = "+uuid+" "+
                 "   and parentaenttypename = '"+parentaenttypename+"' "+
                 " ORDER BY createdat desc; "+
                 "",

        new FetchCallback() {
          onFetch(result) {
            populateDropDown(path, result);
          }
        });
    }
}

updateAllContextGroups() {
    updateContextRelationshipBasedDropdown("Context/Context_Feature/ContextGroupList", "ContextContextGroup", context_id);
}

updateAllContextArtefacts(){
    updateContextRelationshipBasedCursorList("Context/Context_Artefacts/specialFindList", "ContextSpecialFind", context_id);
}

updateAllContextSamples(){
    updateContextRelationshipBasedCursorList("Context/Context_Samples/sampleList", "ContextSample", context_id);
}

updateAllContextHeights() {
    updateContextRelationshipBasedCursorList("Context/Context_Measure/Height_List", "ContextHeight", context_id);   
}

updateAllContextRelationships(){
    Object contextList = new ArrayList();
    String targetContextAreaCode = getFieldValue("Context/Context_Relationships_to_Other_Contexts/Target_Area");
    String targetContextID = getFieldValue("Context/Context_Relationships_to_Other_Contexts/Target_Context_ID");
    String targetContextQuery = "SELECT uuid, response "+
                                "  FROM latestnondeletedarchentformattedidentifiers "+
                                " WHERE (aenttypename='Legacy' "+
                                "    OR (aenttypename in ('Context') "+
                                "        AND ('null' = '"+targetContextAreaCode+"' "+
                                "             OR uuid IN (SELECT uuid "+
                                "                            FROM latestnondeletedaentvalue  "+
                                "                            JOIN attributekey USING (attributeid) "+
                                "                           WHERE attributename = 'AreaCode' "+
                                "                             AND vocabid = '"+targetContextAreaCode+"') "+
                                "                ) "+
                                "        )) "+
                                "   AND uuid IN (SELECT uuid "+
                                "                  FROM latestnondeletedaentvalue  "+
                                "                  JOIN attributekey USING (attributeid) "+
                                "                 WHERE attributename IN ('Context ID', 'LegacyIdentifier') "+
                                "                   AND measure like '"+targetContextID+"'||'%' "+
                                "                )         "+
                                " ORDER BY CAST(response as integer); ";
    if (!isNull(context_id)){
        fetchAll(
            targetContextQuery,
            new FetchCallback() {
                onFetch(result) {
                    Log.d("PAZC Module", "Fetched target contexts: " + result.toString());
                    populateDropDown("Context/Context_Relationships_to_Other_Contexts/context", result);
                }
            }
        );
    }
    else {
      showToast("{You_must_save_a_context_first}");
    }
    updateRelns();
}

updateAllContextPhotologs() {
    updateContextRelationshipBasedDropdown("Context/Context_Attachments/PhotoLogList", "ContextPhotographLog", context_id);
}

makeHierReln(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("{Error}", "{Cannot_save_record_without_id}");
        return;
    }

    if (isNull(context_id)){
        showToast("{You_must_have_saved_your_entity}");
        return;
    }
    String[] arguments = getFieldValue("Context/Context_Relationships_to_Other_Contexts/reln").split("~!~");
    String dest = getFieldValue("Context/Context_Relationships_to_Other_Contexts/context");

    String relSaveCallback = "updateRelns();";
    saveEntitiesToHierRel(arguments[0], context_id, dest, arguments[1], arguments[2], relSaveCallback);
}

selectedEntityIdentiferToName(String destRef, String uuid) {
    String q = "SELECT uuid, response FROM latestnondeletedarchentformattedidentifiers WHERE uuid = " + uuid;
    fetchOne(q,
        new FetchCallback() {
            onFetch(name) {
                populateWebViewHtml(destRef, name.get(1));
            }
        }
    );
}

String selectedEntityIdentifer = null;
selectAssociatedEntityContext() {
    selectedEntityIdentifer = getListItemValue();
    selectedEntityIdentiferToName("Context/Context_Relationships_to_Other_Contexts/selectedEnt", selectedEntityIdentifer);
}

selectAssociatedEntityContextGroup() {
    selectedEntityIdentifer = getListItemValue();
    selectedEntityIdentiferToName("ContextGroup/ContextGroup_Contexts/selectedEnt", selectedEntityIdentifer);
}

selectAssociatedEntityContextGroupCG() {
    selectedEntityIdentifer = getListItemValue();
    selectedEntityIdentiferToName("ContextGroup/Feature_Relationships_to_Other_Features/selectedEnt", selectedEntityIdentifer);
}

updateRelns(){
    selectedEntityIdentifer = null;
    if (!isNull(context_id)){
        populateCursorList(
                "Context/Context_Relationships_to_Other_Contexts/listOfRelns",
                "SELECT childuuid, parentparticipatesverb||' '||response "+
                "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) "+
                "  JOIN createdmodifiedatby USING (uuid) "+
                " WHERE relationshipid in (SELECT relationshipid  "+
                "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  "+
                "                           WHERE relntypename not like 'Context%') "+
                "   and parentuuid = '"+context_id+"' "+
                "   and parentaenttypename = 'Context' "+
                " ORDER BY createdat desc "+
                " limit ? offset ? ;",
                25
        );
    } else {
        showToast("{NoContextId}!");
    }
    refreshTabgroupCSS("Context");
}

loadContextAttributes(){
    makeVocab("PictureGallery", "Context/Context_GeneralInformation/Context_Type", "Context Type");
    makeVocab("CheckBoxGroup", "Context/Context_GeneralInformation/Excavation_Method", "Excavation Method");
    makeVocab("DropDown", "Context/Context_GeneralInformation/Horizon_Boundary", "Horizon Boundary");
    makeVocab("DropDown", "Context/Context_GeneralInformation/Contamination", "Contamination");
    makeVocab("DropDown", "Context/Context_GeneralInformation/Area_Code", "AreaCode");

    makeVocab("HierarchicalDropDown", "Context/Context_Deposits/Soil_Compaction_Type", "Soil Compaction Type");
    makeVocab("DropDown", "Context/Context_Deposits/Soil_Texture", "Soil Texture");
    makeVocab("RadioGroup", "Context/Context_Deposits/Sterile", "Sterile");
    makeVocab("HierarchicalPictureGallery", "Context/Context_Deposits/Soil_Particle_Sorting", "Soil Particle Sorting");
    makeVocab("DropDown", "Context/Context_Deposits/Your_Interpretation", "Deposit Your Interpretation");
    makeVocab("DropDown", "Context/Context_Deposits/Composition_Type", "Composition Type");
    makeVocab("DropDown", "Context/Context_Deposits/Deposit_Bedding", "Deposit Bedding");
    makeVocab("RadioGroup", "Context/Context_Deposits/Sterile", "Sterile");

    makeVocab("DropDown", "Context/Context_Cuts/Shape_of_Cut", "Shape of Cut");
    makeVocab("RadioGroup", "Context/Context_Cuts/Shape_of_Corners", "Shape of Corners");
    makeVocab("RadioGroup", "Context/Context_Cuts/Break_of_Slope_Top", "Break of Slope - Top");
    makeVocab("HierarchicalDropDown", "Context/Context_Cuts/Shape_of_Base", "Shape of Base");
    makeVocab("DropDown", "Context/Context_Cuts/Orientation", "Orientation");
    makeVocab("DropDown", "Context/Context_Cuts/Your_Interpretation", "Cut Your Interpretation");
    makeVocab("HierarchicalDropDown", "Context/Context_Cuts/Sides_of_Cut", "Sides of Cut");
    makeVocab("DropDown", "Context/Context_Cuts/Inclination_of_axis", "Inclination of axis");

    makeVocab("DropDown", "Context/Context_Structures/Structure_Shape", "Structure Shape");
    makeVocab("DropDown", "Context/Context_Structures/Structural_Components", "Structural Components");
    makeVocab("DropDown", "Context/Context_Structures/Bonding", "Bonding");
    makeVocab("DropDown", "Context/Context_Structures/Mudbrick_Shape", "Mudbrick Shape");
    makeVocab("DropDown", "Context/Context_Structures/Your_Interpretation", "Structure Your Interpretation");

    makeVocab("DropDown", "Context/Context_Relationships_to_Other_Contexts/Target_Area", "AreaCode");

    makeVocab("HierarchicalDropDown", "Context/Texture_Helper/Soil_Texture", "Soil Texture Helper");

    String relnListQuery = "SELECT relntypename||'~!~'||coalesce(nullif(parent||'~!~'||child,'~!~'),relntypename||'~!~'||relntypename) as relntypeid, coalesce(nullif(parent,''), relntypename) as name, relntypeid "+
                           "  FROM relntype "+
                           " WHERE relntypename not like '%Context%' "+
                           "   AND relntypename not like '%SpecialFind%' "+
                           " UNION "+
                           " SELECT relntypename||'~!~'||coalesce(nullif(child||'~!~'||parent,'~!~'),relntypename||'~!~'||relntypename), coalesce(nullif(child,''), relntypename) as name, relntypeid "+
                           "  FROM relntype "+
                           " WHERE relntypename not like '%Context%' "+
                           "   AND relntypename not like '%SpecialFind%' "+
                           " ORDER BY relntypeid, name;";

    fetchAll(relnListQuery, new FetchCallback() {
        onFetch(result) {
            print(result);
            populateDropDown("Context/Context_Relationships_to_Other_Contexts/reln", result);
        }
    });
}

openContextTabs() {
  openContextTabs(false);
}

openContextTabs(Boolean showGeneralInformationTab){
    fetchOne("SELECT vocabName FROM vocabulary WHERE vocabid = '"+getFieldValue("Context/Context_GeneralInformation/Context_Type")+"';",
        new FetchCallback() {
          onFetch(name) {
            if (!isNull(name)){
                String vocab = name.get(0);
                if ((vocab.equals("{Deposit}")) || (vocab.equals("{Natural}"))){
                    cancelTab("Context/Context_Cuts", false);
                    cancelTab("Context/Context_Structures", false);
                    cancelTab("Context/Context_Skeletons", false);
                    showTab("Context/Context_Deposits");
                } else if (vocab.equals("{Cut}")){
                    cancelTab("Context/Context_Deposits", false);
                    cancelTab("Context/Context_Structures", false);
                    cancelTab("Context/Context_Skeletons", false);                    
                    showTab("Context/Context_Cuts");
                } else if (vocab.equals("{Structure}")){
                    cancelTab("Context/Context_Deposits", false);
                    cancelTab("Context/Context_Cuts", false);
                    cancelTab("Context/Context_Skeletons", false);                    
                    showTab("Context/Context_Structures");
                } else if (vocab.equals("{Skeleton}")){
                    cancelTab("Context/Context_Deposits", false);
                    cancelTab("Context/Context_Cuts", false);
                    cancelTab("Context/Context_Structures", false);                                        
                    showTab("Context/Context_Skeletons");
                } else {
                    cancelTab("Context/Context_Cuts", false);
                    cancelTab("Context/Context_Deposits", false);
                    cancelTab("Context/Context_Structures", false);
                    cancelTab("Context/Context_Skeletons", false);

                }
            } else {
                cancelTab("Context/Context_Cuts", false);
                cancelTab("Context/Context_Deposits", false);
                cancelTab("Context/Context_Structures", false);
                cancelTab("Context/Context_Skeletons", false);
            }
            if(showGeneralInformationTab) {
              showTab("Context/Context_GeneralInformation");
            }
        }
    });    
}

helpSetTextureActual(){
    showTab("Context/Texture_Helper");
}

setTextureActual(){
    String soilQuery= "SELECT vocabid " +
                      "  FROM vocabulary JOIN attributekey USING (attributeid) "+
                      " WHERE attributeName = 'Soil Texture' "+
                      "   AND vocabname = (SELECT vocabname " +
                                          "  FROM vocabulary JOIN attributekey USING (attributeid) " +
                                          " WHERE vocabid = '"+ getFieldValue("Context/Texture_Helper/Soil_Texture") +"' "+
                                          "   AND attributeName = 'Soil Texture Helper'); ";
    //This function makes the hierarchical soil texture selector write to the texture dropdown. We should discuss.
    Log.d("foo1", soilQuery);

    fetchOne(soilQuery, new FetchCallback() {
        onFetch(textureToSet) {
            if(!isNull(textureToSet)){
                Log.d("foo1", textureToSet.get(0));
                setFieldValue("Context/Context_Deposits/Soil_Texture", textureToSet.get(0));
            } else {
                showToast("Match not found. You shouldn't see this, but select the result manually.");
            }
            cancelTab("Context/Texture_Helper", false);
            showTab("Context/Context_Deposits");
        }
    });
}

removeContextGroupReln() {
    context_group_id = getFieldValue("Context/Context_Feature/ContextGroupList");
    if(!isNull(context_id) && !isNull(context_group_id)) {
      String relationshipidQuery = "select relationshipid from parentchild where parentuuid = '"+context_id+"' and childuuid = '"+context_group_id+"';";
        fetchOne(relationshipidQuery, new FetchCallback() {
          onFetch(result) {
            String deletequery = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) SELECT uuid, relationshipid, 'true', participatesverb, '"+userid+"' FROM latestnondeletedaentreln WHERE relationshipid = '"+result.get(0)+"';";
            fetchOne(deletequery, null);
            deleteRel(result.get(0));
            updateAllContextGroups();
          }
        });        
    }
}

addCloseDate() {
    if(isNull(getFieldValue("Context/Context_GeneralInformation/Date_Closed"))){
        setTimestamp("Context/Context_GeneralInformation/Date_Closed");
    } else {
        showToast("{To_avoid_accidents_please_clear_the_Date_Closed_field_before_updating}");
    }
}

/*** RelnEnt: Context Group***/
onEvent("ContextGroup", "show", "setContextGroupCreatingDateUser(); addNavigationButtons(\"ContextGroup\"); keepTabGroupChanges(\"ContextGroup\"); saveContextGroup();refreshTabgroupCSS(\"ContextGroup\");");
onEvent("ContextGroup/ContextGroup_Contexts"                        , "show"        , "populateContextGroupContextsArea();populateContextGroupRelatedContexts();");
onEvent("ContextGroup/ContextGroup_Contexts/Populate_Target_Context", "delayclick"  , "populateWebViewHtml(\"ContextGroup/ContextGroup_Contexts/selectedEnt\", WEB_REL_SELECTED_NONE); populateContextGroup();");
onEvent("ContextGroup/ContextGroup_Contexts/AddContext"             , "delayclick"  , "addToContextGroup()");
onEvent("ContextGroup/ContextGroup_Contexts/ShowContext"            , "click"       , "loadContextFromContextGroup()");
onEvent("ContextGroup/ContextGroup_Contexts/RemoveContext"          , "click"       , "removeFromContextGroup()");
onEvent("ContextGroup/ContextGroup_Contexts/ContextList"            , "click"       , "selectAssociatedEntityContextGroup()");

onEvent("ContextGroup/Feature_Relationships_to_Other_Features", "show", "updateContextGroupIdentifier(); updateContextGroupRelationshipTargetArea(); updateRelnsCG();");
onEvent("ContextGroup/Feature_Relationships_to_Other_Features/Populate_Target_ContextGroup", "delayclick", "updateAllContextGroupRelationships(); populateWebViewHtml(\"ContextGroup/Feature_Relationships_to_Other_Features/selectedEnt\", WEB_REL_SELECTED_NONE);");
onEvent("ContextGroup/Feature_Relationships_to_Other_Features/createLegacy", "delayclick", "showTextAlert(\"Alert\", \"Legacy identifier:\", \"legacyTextInput()\",  null)");
onEvent("ContextGroup/Feature_Relationships_to_Other_Features/relate", "delayclick", "makeHierRelnCG()");
onEvent("ContextGroup/Feature_Relationships_to_Other_Features/showReln", "click", "loadContextGroupFromReln()");
onEvent("ContextGroup/Feature_Relationships_to_Other_Features/deleteReln", "delayclick", "deleteRelnCG()");
onEvent("ContextGroup/Feature_Relationships_to_Other_Features/listOfRelns", "click", "selectAssociatedEntityContextGroupCG()");

onEvent("ContextGroup/ContextGroup_Attachments", "show", "updateAllContextGroupPhotologs()");
onEvent("ContextGroup/ContextGroup_Attachments/attachPhoto", "click", "attachPictureTo(\"ContextGroup/ContextGroup_Attachments/Photo\")");
onEvent("ContextGroup/ContextGroup_Attachments/attachAudio", "click", "attachAudioTo(\"ContextGroup/ContextGroup_Attachments/Audio\")");
onEvent("ContextGroup/ContextGroup_Attachments/attachVideo", "click", "attachVideoTo(\"ContextGroup/ContextGroup_Attachments/Video\")");
onEvent("ContextGroup/ContextGroup_Attachments/attachSketch", "click", "attachFileTo(\"ContextGroup/ContextGroup_Attachments/Sketch\")");
onEvent("ContextGroup/ContextGroup_Attachments/viewattached", "click", "viewArchEntAttachedFiles(context_group_id)");
onEvent("ContextGroup/ContextGroup_Attachments/newPhotoLog", "delayclick", "isContext=false;newPhotoLogFromContextGroup();verb=\"ContextGroupPhotographLog\";archent_id=context_group_id;");
onEvent("ContextGroup/ContextGroup_Attachments/loadPhotoLog", "click", "loadPhotoLogFrom(getFieldValue(\"ContextGroup/ContextGroup_Attachments/PhotoLogList\"));verb=\"ContextGroupPhotographLog\";archent_id=context_group_id;isContext=false");

setContextGroupCreatingDateUser() {
    if (isNull(context_group_id)) return;
    String cgCreatingUserDateQuery = "select createdBy, createdAt from createdModifiedAtBy where uuid = '"+context_group_id+"';";
    fetchOne(cgCreatingUserDateQuery, new FetchCallback() {
        onFetch(result) {
            Log.d("Boncuklu Module", "Results for Created at, Modified by: " + result.toString());
            setFieldValue("ContextGroup/ContextGroup_Details/CreatingUser", result.get(0));
            setFieldValue("ContextGroup/ContextGroup_Details/DateRecorded", result.get(1));
        }
    });
}

String context_group_id = null;

newContextGroup(menu){
    if (!menu && isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("{Error}", "{Cannot_save_record_without_id}");
        return;
    }
    newTabGroup("ContextGroup");
    context_group_id = null;
    setTimestamp("ContextGroup/ContextGroup_Details/DateRecorded");
    setFieldValue("ContextGroup/ContextGroup_Details/Area_Code", getFieldValue("user/usertab/Area_Code"));
    setFieldValue("ContextGroup/ContextGroup_Details/CreatingUser", username);
    setFieldValue("ContextGroup/ContextGroup_Details/Context_Group_ID", getFieldValue("control/data/ContextGroup_Starting_ID"));
    incField("control/data/ContextGroup_Starting_ID", 1);
    populateContextGroup();
}

loadContextGroup(){
    context_group_id = getListItemValue();
    loadContextGroupFrom(context_group_id);
}

loadContextGroupFrom(String id){
  context_group_id = id;
    showTabGroup("ContextGroup", context_group_id);
    populateContextGroup();
}

loadContextGroupFromContext() {
    context_group_id = getFieldValue("Context/Context_Feature/ContextGroupList");
    if (isNull(context_group_id)) return;
    loadContextGroupFrom(context_group_id);
    updateRelns();
}

loadContextGroupFromReln(){
    String childuuid = selectedEntityIdentifer;
    if (!isNull(childuuid)){
        loadEntityFrom(childuuid);
    } else {
        showWarning("{Nothing_Selected}", "{Please_select_a_child_entity_in_the_list}");
    }
}

saveContextGroup(){
    Boolean enable_autosave = true;
    attributes = createAttributeList();
    attributes.add(createEntityAttribute("Site Code", null, null, moduleSiteCode, null));
    attributes.add(createEntityAttribute("Device Code", null, getFieldValue("user/usertab/Device_Code"), null, null));
    saveTabGroup("ContextGroup", context_group_id, null, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            context_group_id = uuid;
            if (newRecord) {
                setContextGroupCreatingDateUser();
              onContextGroupSaved();
            }
            populateContextGroup();
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onContextGroupSaved(){
    if(!isNull(context_id)) {
        saveEntitiesToRel("ContextContextGroup", context_id, context_group_id);
    }
}

populateContextGroupContextsArea() {
    String contextgroupAreaCode = getFieldValue("ContextGroup/ContextGroup_Details/Area_Code");
    if (!isNull(contextgroupAreaCode)) {
      setFieldValue("ContextGroup/ContextGroup_Contexts/Target_Area", contextgroupAreaCode);
    }
    populateWebViewHtml("ContextGroup/ContextGroup_Contexts/selectedEnt", WEB_REL_SELECTED_NONE);
    selectedEntityIdentifer = null;
}

populateContextGroupRelatedContexts() {
    String contextGroupQuery="SELECT childuuid, response "+
                            "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) "+
                            "  JOIN createdmodifiedatby USING (uuid) "+
                            " WHERE relationshipid in (SELECT relationshipid  "+
                             "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  "+
                             "                           WHERE relntypename = 'ContextContextGroup') "+
                            "   and parentuuid = '"+context_group_id+"' "+
                            "   and parentaenttypename = 'Context Group' "+
                            " ORDER BY CAST(response as integer) "+
                            " limit ? offset ? ;";
    populateCursorList(
                "ContextGroup/ContextGroup_Contexts/ContextList",
                contextGroupQuery,
                25
        );

    Log.d("foo", contextGroupQuery);
    refreshTabgroupCSS("ContextGroup");
}

addToContextGroup() {
    if (isNull(context_group_id)) {
        saveContextGroup();
        showToast("{You_must_have_saved_your_entity}");
        return;
    }
    String selectedContextID = getFieldValue("ContextGroup/ContextGroup_Contexts/AddContextList");
    if (isNull(selectedContextID)) {
      return;
    }
    String relSaveCallback = "populateContextGroup();populateContextGroupRelatedContexts();";
    saveEntitiesToRel("ContextContextGroup", selectedContextID, context_group_id, relSaveCallback);  
}

populateContextGroup() {
    String targetContextID = getFieldValue("ContextGroup/ContextGroup_Contexts/Target_Context_ID");
    String targetContextAreaCode = getFieldValue("ContextGroup/ContextGroup_Contexts/Target_Area");

    String targetContextQuery = "SELECT uuid, response "+
                                    "  FROM latestnondeletedarchentformattedidentifiers "+
                                    " WHERE (aenttypename='Legacy' "+
                                    "    OR (aenttypename = 'Context' "+
                                    "        AND ('null' = '"+targetContextAreaCode+"' "+
                                    "             OR uuid IN (SELECT uuid "+
                                    "                            FROM latestnondeletedaentvalue  "+
                                    "                            JOIN attributekey USING (attributeid) "+
                                    "                           WHERE attributename = 'AreaCode' "+
                                    "                             AND vocabid = '"+targetContextAreaCode+"') "+
                                    "                ) "+
                                    "        )) "+
                                    "   AND uuid IN (SELECT uuid "+
                                    "                  FROM latestnondeletedaentvalue  "+
                                    "                  JOIN attributekey USING (attributeid) "+
                                    "                 WHERE attributename IN ('Context ID', 'LegacyIdentifier') "+
                                    "                   AND measure like '"+targetContextID+"'||'%' "+
                                    "                )         "+
                                    " ORDER BY CAST(response as integer); ";

    fetchAll(targetContextQuery, new FetchCallback() {
        onFetch(result) {
            print(result);
            populateDropDown("ContextGroup/ContextGroup_Contexts/AddContextList", result);
        }
    });
}

deleteContextGroup(){
    if (!isNull(context_group_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Context_Group}", "reallyDeleteContextGroup()", "doNotDelete()");
    }
}           

reallyDeleteContextGroup(){
    deleteArchEnt(context_group_id);
    cancelTabGroup("ContextGroup", false);
}

doNotDelete(){
    showToast("{Delete_Cancelled}");
}

loadContextFromContextGroup(){
    String childuuid = selectedEntityIdentifer;
    if (!isNull(childuuid)){
        loadEntityFrom(childuuid);
    } else {
        showWarning("{Nothing_Selected}", "{Please_select_a_child_entity_in_the_list}");
    }
}

removeFromContextGroup() {
  String childuuid = selectedEntityIdentifer;
  if (!isNull(childuuid)){
    String relationshipidQuery = "select relationshipid from parentchild where parentuuid = '"+context_group_id+"' and childuuid = '"+childuuid+"';";
    fetchOne(relationshipidQuery, new FetchCallback() {
      onFetch(result) {
        String deletequery = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) SELECT uuid, relationshipid, 'true', participatesverb, '"+userid+"' FROM latestnondeletedaentreln WHERE relationshipid = '"+result.get(0)+"';";
        fetchOne(deletequery, null);
        deleteRel(result.get(0));
        populateWebViewHtml("ContextGroup/ContextGroup_Contexts/selectedEnt", WEB_REL_SELECTED_NONE);
        selectedEntityIdentifer = null;
        populateContextGroupRelatedContexts();
      }
    });        
  } else {
    showWarning("{Nothing_Selected}", "{Please_select_a_child_entity_in_the_list}");
  }
}

updateAllContextGroupPhotologs() {
    updateNonContextRelationshipBasedDropdown("ContextGroup/ContextGroup_Attachments/PhotoLogList", "ContextGroupPhotographLog", "Context Group", context_group_id);
}

deletePhotoLogFromContextGroup(){
    photolog_id = getFieldValue("ContextGroup/ContextGroup_Attachments/PhotoLogList");
    if (!isNull(photolog_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Photograph Log!", "reallyDeletePhotoLog()", "doNotDelete()");
    }
}

makeHierRelnCG(){
    if (isNull(getFieldValue("ContextGroup/ContextGroup_Details/Title"))) {
        showWarning("Logic Error", "Cannot save record without title");
        return;
    }

    if (isNull(context_group_id)){
        showToast("You must have saved your entity.");
        return;
    }
    String[] arguments = getFieldValue("ContextGroup/Feature_Relationships_to_Other_Features/reln").split("~!~");
    String dest = getFieldValue("ContextGroup/Feature_Relationships_to_Other_Features/ContextGroup");
    String relSaveCallback = "updateRelnsCG();";
    saveEntitiesToHierRel(arguments[0], context_group_id, dest, arguments[1], arguments[2], relSaveCallback);
}

updateContextGroupIdentifier(){
    if (!isNull(context_group_id)){
        fetchOne("select response from latestNonDeletedArchEntFormattedIdentifiers where uuid = '"+context_group_id+"';", new FetchCallback() {
          onFetch(result) {
            if (!isNull(result)){
                setFieldValue("ContextGroup/Feature_Relationships_to_Other_Features/ContextGroup_id", result.get(0));
            }
          }
        });    
    } else {
        showToast("{pleaseSave} {ContextGroup} {beforeThisTab}.");
    }
}

updateContextGroupRelationshipTargetArea() {
    setFieldValue("ContextGroup/Feature_Relationships_to_Other_Features/Target_Area", getFieldValue("ContextGroup/ContextGroup_Details/Area_Code"));
    populateWebViewHtml("ContextGroup/Feature_Relationships_to_Other_Features/selectedEnt", WEB_REL_SELECTED_NONE);
}

updateRelnsCG(){
    selectedEntityIdentifer = null;
    if (!isNull(context_group_id)){        
        populateCursorList(
                "ContextGroup/Feature_Relationships_to_Other_Features/listOfRelns",
                "SELECT childuuid, parentparticipatesverb||' '||response "+
                "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) "+
                "  JOIN createdmodifiedatby USING (uuid) "+
                " WHERE relationshipid in (SELECT relationshipid  "+
                "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  "+
                "                           WHERE relntypename not like 'Context%') "+
                "   and parentuuid = '"+context_group_id+"' "+
                "   and parentaenttypename = 'Context Group' "+
                " ORDER BY createdat desc "+
                " limit ? offset ? ;",
                25
        );
    } else {
        showToast("{NoContextGroupId}!");
    }
    refreshTabgroupCSS("ContextGroup");
}

updateAllContextGroupRelationships(){
    Object contextGroupList = new ArrayList();
    String targetContextGroupAreaCode = getFieldValue("ContextGroup/Feature_Relationships_to_Other_Features/Target_Area");
    String targetContextGroupID = getFieldValue("ContextGroup/Feature_Relationships_to_Other_Features/Target_ContextGroup_ID");
    String targetContextGroupQuery = "SELECT uuid, response "+
                                "  FROM latestnondeletedarchentformattedidentifiers "+
                                " WHERE (aenttypename='Legacy' "+
                                "    OR (aenttypename = 'Context Group'"+
                                "        AND ('null' = '"+targetContextGroupAreaCode+"' "+
                                "             OR uuid IN (SELECT uuid "+
                                "                            FROM latestnondeletedaentvalue  "+
                                "                            JOIN attributekey USING (attributeid) "+
                                "                           WHERE attributename = 'AreaCode' "+
                                "                             AND vocabid = '"+targetContextGroupAreaCode+"') "+
                                "                ) "+
                                "        )) "+
                                "   AND uuid IN (SELECT uuid "+
                                "                  FROM latestnondeletedaentvalue  "+
                                "                  JOIN attributekey USING (attributeid) "+
                                "                 WHERE attributename IN ('Context Group ID', 'LegacyIdentifier') "+
                                "                   AND measure like '"+targetContextGroupID+"'||'%' "+
                                "                )         "+
                                " ORDER BY CAST(response as integer); ";
    if (!isNull(context_group_id)){
        fetchAll(
            targetContextGroupQuery,
            new FetchCallback() {
                onFetch(result) {
                    Log.d("PAZC Module", "Fetched target contexts: " + result.toString());
                    populateDropDown("ContextGroup/Feature_Relationships_to_Other_Features/ContextGroup", result);
                }
            }
        );
    }
    else {
      showToast("{You_must_save_a_context_group_first}");
    }
    updateRelnsCG();
}

deleteRelnCG(){
    String childuuid = selectedEntityIdentifer;
    if (!isNull(childuuid)){
        String relationshipidQuery = "select relationshipid from parentchild where parentuuid = '"+context_group_id+"' and childuuid = '"+childuuid+"';";
        fetchOne(relationshipidQuery, new FetchCallback() {
          onFetch(result) {
            String deletequery = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) SELECT uuid, relationshipid, 'true', participatesverb, '"+userid+"' FROM latestnondeletedaentreln WHERE relationshipid = '"+result.get(0)+"';";
            fetchOne(deletequery, null);
            deleteRel(result.get(0));
            populateWebViewHtml("ContextGroup/Feature_Relationships_to_Other_Features/selectedEnt", WEB_REL_SELECTED_NONE);
            selectedEntityIdentifer = null;
            updateRelnsCG();
          }
        });        
    } else {
      showWarning("{Nothing_Selected}", "{Please_select_a_child_entity_in_the_list}");
    }
}

loadContextGroupAttributes(){
    makeVocab("DropDown", "ContextGroup/ContextGroup_Details/Area_Code", "AreaCode");
    makeVocab("DropDown", "ContextGroup/ContextGroup_Details/Context_Type", "CG Context Type");
    makeVocab("DropDown", "ContextGroup/ContextGroup_Contexts/Target_Area", "AreaCode");
    makeVocab("DropDown", "ContextGroup/Feature_Relationships_to_Other_Features/Target_Area", "AreaCode");

    String relnListQuery = "SELECT relntypename||'~!~'||coalesce(nullif(parent||'~!~'||child,'~!~'),relntypename||'~!~'||relntypename) as relntypeid, coalesce(nullif(parent,''), relntypename) as name, relntypeid "+
                           "  FROM relntype "+
                           " WHERE relntypename not like '%Context%' "+
                           "   AND relntypename not like '%SpecialFind%' "+
                           " UNION "+
                           " SELECT relntypename||'~!~'||coalesce(nullif(child||'~!~'||parent,'~!~'),relntypename||'~!~'||relntypename), coalesce(nullif(child,''), relntypename) as name, relntypeid "+
                           "  FROM relntype "+
                           " WHERE relntypename not like '%Context%' "+
                           "   AND relntypename not like '%SpecialFind%' "+
                           " ORDER BY relntypeid, name;";

    fetchAll(relnListQuery, new FetchCallback() {
        onFetch(result) {
            print(result);
            populateDropDown("ContextGroup/Feature_Relationships_to_Other_Features/reln", result);
        }
    });
}

/*** Sample ***/
onEvent("Sample", "show", "addNavigationButtons(\"Sample\"); keepTabGroupChanges(\"Sample\"); saveSample(\"\");");
onEvent("Sample/Sample_Attachments/attachPhoto", "click", "attachPictureTo(\"Sample/Sample_Attachments/Photo\")");
onEvent("Sample/Sample_Attachments/attachAudio", "click", "attachAudioTo(\"Sample/Sample_Attachments/Audio\")");
onEvent("Sample/Sample_Attachments/attachVideo", "click", "attachVideoTo(\"Sample/Sample_Attachments/Video\")");
onEvent("Sample/Sample_Attachments/attachSketch", "click", "attachFileTo(\"Sample/Sample_Attachments/Sketch\")");
onEvent("Sample/Sample_Attachments/viewattached", "click", "viewArchEntAttachedFiles(sample_id)");

String sample_id = null;

newSample(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("{Error}", "{Cannot_save_record_without_id}");
        return;
    }
    if (isNull(context_id)){
        showToast("{You_must_save_a_context_first}");
        return;
    }
    sample_id = null;
    newTabGroup("Sample");
    setFieldValue("Sample/Sample_GeneralInformation/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
    setFieldValue("Sample/Sample_GeneralInformation/Sample_ID", getFieldValue("control/data/Sample_Starting_ID"));
    incField("control/data/Sample_Starting_ID", 1);
}

loadSample() {
    sample_id = getListItemValue();
    loadSampleFrom(sample_id);
}

loadSampleFrom(String id) {
    sample_id = id;
    if (isNull(sample_id)) return;
    showTabGroup("Sample", sample_id);
}

saveSample(String callback) {
    Boolean enable_autosave = true;
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("AreaCode", null, getFieldValue("Context/Context_GeneralInformation/Area_Code"), null, null));
    attributes.add(createEntityAttribute("Site Code", null, null, moduleSiteCode, null));
    attributes.add(createEntityAttribute("Device Code", null, getFieldValue("user/usertab/Device_Code"), null, null));
    saveTabGroup("Sample", sample_id, null, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            sample_id = uuid;
            if (newRecord) {
              onSampleSaved();
            }
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onSampleSaved(){
    saveEntitiesToRel("ContextSample", context_id, sample_id);
    showToast("{Associated_with_Context}");

}

deleteSampleFromContext(){
    sample_id = getFieldValue("Context/Context_Samples/sampleList");
    if (!isNull(sample_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Sample}", "reallyDeleteSample()", "doNotDelete()");
    }
}

deleteSample(){
    if (!isNull(sample_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Sample}", "reallyDeleteSample()", "doNotDelete()");
    } else {
        cancelTabGroup("Sample", true);
    }
}

reallyDeleteSample(){
    deleteArchEnt(sample_id);
    showTabGroup("Sample");
    cancelTabGroup("Sample", false);
}

doNotDelete(){
    showToast("{Delete_Cancelled}");
}

loadSampleAttributes(){
    makeVocab("DropDown", "Sample/Sample_GeneralInformation/Sample_Type", "Sample Type");
    makeVocab("DropDown", "Sample/Sample_GeneralInformation/Sample_Location", "Sample Location");
}

/*** Special Find ***/
onEvent("Special_Find", "show", "addNavigationButtons(\"Special_Find\"); keepTabGroupChanges(\"Special_Find\"); saveSpecialFind(\"\");");
onEvent("Special_Find/Special_Find_GeneralInformation/attachPhoto", "click", "attachPictureTo(\"Special_Find/Special_Find_GeneralInformation/Photo\")");
onEvent("Special_Find/Special_Find_GeneralInformation/attachAudio", "click", "attachAudioTo(\"Special_Find/Special_Find_GeneralInformation/Audio\")");
onEvent("Special_Find/Special_Find_GeneralInformation/attachVideo", "click", "attachVideoTo(\"Special_Find/Special_Find_GeneralInformation/Video\")");
onEvent("Special_Find/Special_Find_GeneralInformation/viewattached", "click", "viewArchEntAttachedFiles(special_find_id)");

String special_find_id = null;

newSpecialFind(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("{Error}", "{Cannot_save_record_without_id}");
        return;
    }
    if (isNull(context_id)){
        showToast("{You_must_save_a_context_first}");
        return;
    }
    special_find_id = null;
    newTabGroup("Special_Find");
    setFieldValue("Special_Find/Special_Find_GeneralInformation/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
}

loadSpecialFind() {
    special_find_id = getListItemValue();
    loadSpecialFindFrom(special_find_id);
}

loadSpecialFindFrom(String id) {
    special_find_id = id;
    if (isNull(special_find_id)) return;
    showTabGroup("Special_Find", special_find_id);
}

saveSpecialFind(String callback) {
    Boolean enable_autosave = true;
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("AreaCode", null, getFieldValue("Context/Context_GeneralInformation/Area_Code"), null, null));
    attributes.add(createEntityAttribute("Site Code", null, null, moduleSiteCode, null));
    attributes.add(createEntityAttribute("Device Code", null, getFieldValue("user/usertab/Device_Code"), null, null));
    saveTabGroup("Special_Find", special_find_id, null, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            special_find_id = uuid;
            if (newRecord) {
              onSpecialFindSaved();
            }
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onSpecialFindSaved(){
    saveEntitiesToRel("ContextSpecialFind", context_id, special_find_id);
    showToast("{Associated_with_Context}");
}

deleteSpecialFindFromContext(){
    special_find_id = getFieldValue("Context/Context_Artefacts/specialFindList");
    if (!isNull(special_find_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Special_Find}", "reallyDeleteSpecialFind()", "doNotDelete()");
    }
}

deleteSpecialFind(){
    if (!isNull(special_find_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Special_Find}", "reallyDeleteSpecialFind()", "doNotDelete()");
    } else {
        cancelTabGroup("Special_Find", true);
    }
}

reallyDeleteSpecialFind(){
    deleteArchEnt(special_find_id);
    showTabGroup("Special_Find");
    cancelTabGroup("Special_Find", false);
}

doNotDelete(){
    showToast("{Delete_Cancelled}");
}

loadSpecialFindAttributes(){
    makeVocab("HierarchicalDropDown", "Special_Find/Special_Find_GeneralInformation/Special_Find_Class", "Special Find Class");
    makeVocab("DropDown", "Special_Find/Special_Find_GeneralInformation/Source", "Source");
    makeVocab("DropDown", "Special_Find/Special_Find_GeneralInformation/Special_Find_Location", "Special Find Location");
}

/*** Arch Ent: PhotoLog ***/
onEvent("Photograph_Log", "show", "addNavigationButtons(\"Photograph_Log\"); keepTabGroupChanges(\"Photograph_Log\"); savePhotoLog(\"\");");

String photolog_id = null;
List photologAttributes = null;

newPhotoLog(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("{Error}", "{Cannot_save_record_without_id}");
        return;
    }
    if (isNull(context_id)){
        showToast("{You_must_save_a_context_first}");
        return;
    }
    photolog_id = null;
    photologAttributes = null;
    photologAttributes = createAttributeList();
    photologAttributes.add(createEntityAttribute("AreaCode", null, getFieldValue("Context/Context_GeneralInformation/Area_Code"), null, null));
    photologAttributes.add(createEntityAttribute("Device Code", null, getFieldValue("user/usertab/Device_Code"), null, null));
    newTabGroup("Photograph_Log");
    setFieldValue("Photograph_Log/Photograph_Log/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
}

newPhotoLogFromContextGroup(){
    if (isNull(getFieldValue("ContextGroup/ContextGroup_Details/Context_Group_ID"))) {
        showWarning("{Error}", "{Cannot_save_record_without_id}");
        return;
    }
    if (isNull(context_group_id)){
        showToast("{You_must_save_a_context_group_first}");
        return;
    }
    photolog_id = null;
    photologAttributes = null;
    photologAttributes = createAttributeList();
    photologAttributes.add(createEntityAttribute("AreaCode", null, getFieldValue("ContextGroup/ContextGroup_Details/Area_Code"), null, null));
    photologAttributes.add(createEntityAttribute("Device Code", null, getFieldValue("user/usertab/Device_Code"), null, null));
    newTabGroup("Photograph_Log");
    setFieldValue("Photograph_Log/Photograph_Log/Context_Group_ID", getFieldValue("ContextGroup/ContextGroup_Details/Context_Group_ID"));
}

loadPhotoLog() {
    photolog_id = getFieldValue("Context/Context_Attachments/PhotoLogList");
    loadPhotoLogFrom(photolog_id);
}

loadPhotoLogFrom(String id) {
    photolog_id = id;
    if (isNull(photolog_id)) return;
    photologAttributes = null;
    showTabGroup("Photograph_Log", photolog_id);
}

loadPhotoLogAttributes(){
    makeVocab("DropDown", "Photograph_Log/Photograph_Log/Scene_Type", "Scene Type");
}

savePhotoLog(String callback) {
    Boolean enable_autosave = true;
    saveTabGroup("Photograph_Log", photolog_id, null, photologAttributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            photolog_id = uuid;
            if (newRecord) {
              onPhotoLogSaved();
            }
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onPhotoLogSaved(){
    if (!isNull(getFieldValue("Photograph_Log/Photograph_Log/Context_ID"))) {           // Photolog tabgroup accessed from Context
        saveEntitiesToRel("ContextPhotographLog", context_id, photolog_id);
        showToast("{Associated_with_Context}");
    } else if (!isNull(getFieldValue("Photograph_Log/Photograph_Log/Context_Group_ID"))) { // Photolog tabgroup accessed from CG
        saveEntitiesToRel("ContextGroupPhotographLog", context_group_id, photolog_id);
        showToast("{Associated_with} {ContextGroup}");
    } else {
        showToast("{Err_Relating_Log}");
    }
}

deletePhotoLogFromContext(){
    photolog_id = getFieldValue("Context/Context_Attachments/PhotoLogList");
    if (!isNull(photolog_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Photograph_Log}", "reallyDeletePhotoLog()", "doNotDelete()");
    }
}

deletePhotoLog(){
    if (!isNull(photolog_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Photograph_Log}", "reallyDeletePhotoLog()", "doNotDelete()");
    } else {
        cancelTabGroup("Photograph_Log", true);
    }
}

reallyDeletePhotoLog(){
    deleteArchEnt(photolog_id);
    showTabGroup("Photograph_Log");
    cancelTabGroup("Photograph_Log", false);
}

doNotDelete(){
    showToast("{Delete_Cancelled}");
}

/** Action Bar **/
addActionBarItem("clean_synced_files", new ActionButtonCallback() {
    actionOnLabel() {
      "{Clean_Synced_Files}";
    }
    actionOn() {
      cleanSyncedFiles();
    }
});

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_Sync}";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("{Sync_Disabled}");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "{Enable_Sync}";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("{Sync_Enabled}");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_Internal_GPS}";
    }
    actionOn() {
        stopGPS();
        showToast("{Internal_GPS_Disabled}");
        updateGPSDiagnostics();
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Enable_Internal_GPS}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{Internal_GPS_Enabled}");
        updateGPSDiagnostics();
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_External_GPS}";
    }
    actionOn() {
        stopGPS();
        if (isBluetoothConnected()) {
          showToast("{External_GPS_Disabled}");
        } else {
          showToast("{Please_Enable_Bluetooth}");
        }
        updateGPSDiagnostics();
    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "{Enable_External_GPS}";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("{External_GPS_Enabled}");
        } else {
            showToast("{Please_Enable_Bluetooth}");
            this.actionOn();
        }
        updateGPSDiagnostics();
    }
});

/*** Navigation Drawer ***/
removeNavigationButtons() {
  removeNavigationButton("new");
  removeNavigationButton("duplicate");
  removeNavigationButton("delete");
}

addNavigationButtons(String tabgroup) {
  removeNavigationButtons();
  addNavigationButton("new", new ActionButtonCallback() {
    actionOnLabel() {
      "{New}";
    }
    actionOn() {
      if(!isNull(getRecordId(tabgroup))) {
          newRecord(tabgroup);
          showToast("{New_record_created}");
      } else {
          showAlert("{Warning}", "{Any_unsaved_changes_will_be_lost}", "newRecord(\""+tabgroup+"\")", "");
      }
    }
  }, "success");
  if (!tabgroup.equals("Diary")) {
    addNavigationButton("duplicate", new ActionButtonCallback() {
      actionOnLabel() {
        "{Duplicate}";
      }
      actionOn() {
        if(!isNull(getRecordId(tabgroup))) {
            duplicateRecord(tabgroup);
        } else {
            showWarning("{Warning}", "{This_record_is_unsaved_and_cannot_be_duplicated}");
        }
      }
    }, "primary");
  }
  addNavigationButton("delete", new ActionButtonCallback() {
    actionOnLabel() {
      "{Delete}";
    }
    actionOn() {
      deleteRecord(tabgroup, getRecordId(tabgroup));
    }
  }, "danger");
}

// Returns the record id of the given tabgroup
getRecordId(String tabgroup) {
  if (tabgroup.equals("Context")) {
    return context_id;
  } else if (tabgroup.equals("ContextGroup")) {
    return context_group_id;
  } else if (tabgroup.equals("Diary")) {
    return diary_id;
  } else if (tabgroup.equals("Sample")) {
    return sample_id;
  } else if (tabgroup.equals("Special_Find")) {
    return special_find_id;
  } else if (tabgroup.equals("Photograph_Log")) {
    return photolog_id;
  } else if (tabgroup.equals("Height")) {
    return height_id;
  } else {
    Log.e("PAZC Module", "Can't get the record id for the tabgroup '"+tabgroup+"'");
    return;
  }
}

// Makes a new record of the given tabgroup
newRecord(String tabgroup) {
  if (tabgroup.equals("Context")) {
    cancelTabGroup(tabgroup, false);
    newContext();
  } else if (tabgroup.equals("ContextGroup")) {
    cancelTabGroup(tabgroup, false);
    newContextGroup(true);
  } else if (tabgroup.equals("Diary")) {
    cancelTabGroup(tabgroup, false);
    newDiary();
  } else if (tabgroup.equals("Sample")) {
    cancelTabGroup(tabgroup, false);
    newSample();
  } else if (tabgroup.equals("Special_Find")) {
    cancelTabGroup(tabgroup, false);
    newSpecialFind();
  } else if (tabgroup.equals("Photograph_Log")) {
    cancelTabGroup(tabgroup, false);
    newPhotoLog();
  } else if (tabgroup.equals("Height")) {
    cancelTabGroup(tabgroup, false);
    newHeight();
  } else {
    Log.e("PAZC Module", "Can't make new record for the tabgroup '"+tabgroup+"'");
    return;
  }
}

// Deletes the current record of the given tabgroup
deleteRecord(String tabgroup, String id) {
  if (tabgroup.equals("Context")) {
    deleteContext();
  } else if (tabgroup.equals("ContextGroup")) {
    deleteContextGroup();
  } else if (tabgroup.equals("Diary")) {
    deleteDiary();
  } else if (tabgroup.equals("Sample")) {
    deleteSample();
  } else if (tabgroup.equals("Special_Find")) {
    deleteSpecialFind();
  } else if (tabgroup.equals("Photograph_Log")) {
    deletePhotoLog();
  } else if (tabgroup.equals("Height")) {
    deleteHeight();
  } else {
    Log.e("PAZC Module", "Can't delete the record for the tabgroup '"+tabgroup+"' of id '"+id+"'");
    return;
  }
}

// Duplicates the current record of the given tabgroup
duplicateRecord(String tabgroup) {
  dialog = showBusy("Duplicating", "please wait");
  Log.d("duplicateRecord", tabgroup);

  if (tabgroup.equals("Context")) {
    duplicateContext();
  } else if (tabgroup.equals("ContextGroup")) {
    duplicateContextGroup();
  } else if (tabgroup.equals("Diary")) {
    duplicateDiary();
  } else if (tabgroup.equals("Sample")) {
    duplicateSample();
  } else if (tabgroup.equals("Special_Find")) {
    duplicateSpecialFind();
  } else if (tabgroup.equals("Photograph_Log")) {
    duplicatePhotoLog();
  } else if (tabgroup.equals("Height")) {
    duplicateHeight();
  } else {
    Log.e("PAZC Module", "Can't make duplicate the record for the tabgroup '"+tabgroup+"'");
    dialog.dismiss();
    return;
  }
}

// generic fetch saved attributes query
getDuplicateAttributeQuery(String originalRecordID, String attributesToDupe) {
  String duplicateQuery = "SELECT attributename, freetext, vocabid, measure, certainty " +
    " FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) " +
    " WHERE attributename IN ("+attributesToDupe+") " + 
    " AND uuid = '"+originalRecordID+"'; ";
  return duplicateQuery;
}

getDuplicateRelnQuery(String originalRecordID) {
  String dupeRelnQuery = "SELECT relntypename, parentparticipatesverb, childparticipatesverb, childuuid "+
                         "  FROM parentchild join relationship using (relationshipid) "+
                         "  JOIN relntype using (relntypeid) "+
                         " WHERE parentuuid = '"+originalRecordID+"';";
  return dupeRelnQuery;

}

// generic get extra attributes
getExtraAttributes(fetchedAttributes) {
  List extraAttributes = createAttributeList();
  Log.d("PAZC Module", "Duplicating fetched attributes: " + fetchedAttributes.toString());
  for (savedAttribute : fetchedAttributes) {
    extraAttributes.add(createEntityAttribute(savedAttribute.get(0), savedAttribute.get(1), savedAttribute.get(2), savedAttribute.get(3), savedAttribute.get(4)));
  }
  return extraAttributes;
}

makeDuplicateRelationships(fetchedAttributes, String newuuid){
    for (savedAttribute : fetchedAttributes){
        //    saveEntitiesToHierRel(relnname, parent, child, parentverb, childverb, relSaveCallback);
        //relntypename, parentparticipatesverb, childparticipatesverb, childuuid
        saveEntitiesToHierRel(savedAttribute.get(0), newuuid, savedAttribute.get(3), savedAttribute.get(1), savedAttribute.get(2), null);
    }
}

duplicateContext() {

  List extraAttributes = createAttributeList();
  extraAttributes.add(createEntityAttribute("Site Code", null, null, moduleSiteCode, null));    

  disableAutoSave("Context");
  populateCameraPictureGallery("Context/Context_Attachments/Photo", new ArrayList());
  populateFileList("Context/Context_Attachments/Sketch", new ArrayList());
  populateFileList("Context/Context_Attachments/Audio", new ArrayList());
  populateVideoGallery("Context/Context_Attachments/Video", new ArrayList());
  setFieldValue("Context/Context_GeneralInformation/Context_ID", getFieldValue("control/data/ContextIncrement")); 
  incField("control/data/ContextIncrement", 1);


  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      context_id = uuid;
      
      Boolean enable_autosave = true;
      showToast("{Duplicated_record}");
      dialog.dismiss();
      saveTabGroup("Context", context_id, null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          context_id = autosaveUuid;
          //intentionally did not duplicate children of context.
        }
      }, enable_autosave);
    }
  };

  
  fetchAll(getDuplicateAttributeQuery(context_id, "'Site Code', 'Device Code'"), new FetchCallback(){
    onFetch(result) { 
        excludeAttributes = new ArrayList();
        excludeAttributes.add("Photo");
        excludeAttributes.add("Sketch");
        excludeAttributes.add("Audio");
        excludeAttributes.add("Video"); 
        duplicateTabGroup("Context", null, getExtraAttributes(result), excludeAttributes, saveCallback);
        }
  });
    
}

duplicateContextGroup() {

  disableAutoSave("ContextGroup");
  //setFieldValue("ContextGroup/ContextGroup_Details/Title", null);
  populateCameraPictureGallery("ContextGroup/ContextGroup_Attachments/Photo", new ArrayList());
  populateFileList("ContextGroup/ContextGroup_Attachments/Sketch", new ArrayList());
  populateFileList("ContextGroup/ContextGroup_Attachments/Audio", new ArrayList());
  populateVideoGallery("ContextGroup/ContextGroup_Attachments/Video", new ArrayList());
  setFieldValue("ContextGroup/ContextGroup_Details/Context_Group_ID", getFieldValue("control/data/ContextGroup_Starting_ID"));
  incField("control/data/ContextGroup_Starting_ID", 1);
/*
  List extraAttributes = createAttributeList();
  extraAttributes.add(createEntityAttribute("Site Code", null, null, moduleSiteCode, null));
*/
  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      context_group_id = uuid;
      Boolean enable_autosave = true;
      showToast("{Duplicated_record}"); 
      dialog.dismiss();
     
      saveTabGroup("ContextGroup", context_group_id, null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          context_group_id = autosaveUuid;
          //again, didn't choose to duplicate child contexts.
        }
      }, enable_autosave);
    }
  };
  fetchAll(getDuplicateAttributeQuery(context_group_id, "'Site Code', 'Device Code'"), new FetchCallback(){
    onFetch(result) { 
      excludeAttributes = new ArrayList();
      excludeAttributes.add("Photo");
      excludeAttributes.add("Sketch");
      excludeAttributes.add("Audio");
      excludeAttributes.add("Video");
      duplicateTabGroup("ContextGroup", null, getExtraAttributes(result), excludeAttributes, saveCallback);
      }
    });
}

duplicateDiary() {
    String oldDiary_ID = diary_id;
    disableAutoSave("Diary");
    setMonthDay("Diary/Diary/Timestamp");
    setFieldValue("Diary/Diary/CreatedBy", username);
    populateFileList("Diary/Diary/Sketch", new ArrayList());
    populateCameraPictureGallery("Diary/Diary/Photo", new ArrayList());
    // populateAudioList("Diary/Diary/Audio", new ArrayList());
    populateFileList("Diary/Diary/Audio", new ArrayList());
    populateVideoGallery("Diary/Diary/Video", new ArrayList());  

    saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      diary_id = uuid;
      Boolean enable_autosave = true;

      fetchAll(getDuplicateRelnQuery(diary_id), new FetchCallback(){
        onFetch(result) {
          makeDuplicateRelationships(result, diary_id);
          showToast("{Duplicated_record}");
          dialog.dismiss();          
        }
      });

      saveTabGroup("Diary", diary_id, null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          diary_id = autosaveUuid;
        }
      }, enable_autosave);
    }
  };

  fetchAll(getDuplicateAttributeQuery(diary_id), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();
      //excludeAttributes.add("AreaCode");
      //excludeAttributes.add("Site Code");
      excludeAttributes.add("FileAttach");
      excludeAttributes.add("Photo");
      excludeAttributes.add("Audio");
      excludeAttributes.add("Video");
      duplicateTabGroup("Diary", null, null, excludeAttributes, saveCallback);
    }
  });
}

duplicateSample() {
  String oldSample_ID = sample_id;

  disableAutoSave("Sample");
  populateCameraPictureGallery("Sample/Sample_Attachments/Photo", new ArrayList());
  populateFileList("Sample/Sample_Attachments/Sketch", new ArrayList());
  populateFileList("Sample/Sample_Attachments/Audio", new ArrayList());
  populateVideoGallery("Sample/Sample_Attachments/Video", new ArrayList());
  setFieldValue("Sample/Sample_GeneralInformation/Sample_ID", getFieldValue("control/data/Sample_Starting_ID")); 
  incField("control/data/Sample_Starting_ID", 1);

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      sample_id = uuid;
      Boolean enable_autosave = true;

      fetchAll(getDuplicateRelnQuery(oldSample_ID), new FetchCallback(){
        onFetch(result) {
          makeDuplicateRelationships(result, sample_id);
          showToast("{Duplicated_record}");
          dialog.dismiss();          
        }
      });


      saveTabGroup("Sample", sample_id, null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          sample_id = autosaveUuid;
        }
      }, enable_autosave);
    }
  };

  fetchAll(getDuplicateAttributeQuery(sample_id, "'Site Code', 'Device Code'"), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();
      //excludeAttributes.add("AreaCode");
      //excludeAttributes.add("Site Code");
      excludeAttributes.add("Photo");
      excludeAttributes.add("Sketch");
      excludeAttributes.add("Audio");
      excludeAttributes.add("Video");
      duplicateTabGroup("Sample", null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
duplicateSpecialFind() {
  disableAutoSave("Special_Find");

  populateCameraPictureGallery("Special_Find/Special_Find_GeneralInformation/Photo", new ArrayList());
  populateFileList("Special_Find/Special_Find_GeneralInformation/Audio", new ArrayList());
  populateVideoGallery("Special_Find/Special_Find_GeneralInformation/Video", new ArrayList());

  String oldSpecialFind_ID = special_find_id;
  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      special_find_id = uuid;
      Boolean enable_autosave = true;

      fetchAll(getDuplicateRelnQuery(oldSpecialFind_ID), new FetchCallback(){
        onFetch(result) {
          makeDuplicateRelationships(result, special_find_id);
          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });
      saveTabGroup("Special_Find", special_find_id, null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          special_find_id = autosaveUuid;
          
          populateCameraPictureGallery("Sample/Sample_GeneralInformation/Photo", new ArrayList());
          
        }
      }, enable_autosave);
    }
  };

  fetchAll(getDuplicateAttributeQuery(special_find_id, "'AreaCode', 'Site Code'"), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();
      //excludeAttributes.add("AreaCode");
      //excludeAttributes.add("Site Code");
      excludeAttributes.add("Photo");
      excludeAttributes.add("Audio");
      excludeAttributes.add("Video");
      duplicateTabGroup("Special_Find", null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

duplicatePhotoLog() {
  disableAutoSave("Photograph_Log");

  String oldPhotolog_ID = photolog_id;
  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      photolog_id = uuid;
      Boolean enable_autosave = true;
      fetchAll(getDuplicateRelnQuery(oldPhotolog_ID), new FetchCallback(){
          onFetch(result) {
              makeDuplicateRelationships(result, photolog_id);
              showToast("{Duplicated_record}");
              dialog.dismiss();
          }
        }); 

      saveTabGroup("Photograph_Log", photolog_id, null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          photolog_id = autosaveUuid;          
        }
      }, enable_autosave);
    }
  };

  fetchAll(getDuplicateAttributeQuery(photolog_id, "'AreaCode', 'Site Code'"), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();
      //excludeAttributes.add("AreaCode");
      //excludeAttributes.add("Site Code");
      duplicateTabGroup("Photograph_Log", null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

duplicateHeight() {
  disableAutoSave("Height");

  String oldHeight_ID = height_id;
  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      height_id = uuid;
      Boolean enable_autosave = true;
      fetchAll(getDuplicateRelnQuery(oldHeight_ID), new FetchCallback(){
          onFetch(result) {
              makeDuplicateRelationships(result, height_id);
              showToast("{Duplicated_record}");
              dialog.dismiss();
          }
        }); 

      saveTabGroup("Height", height_id, null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          height_id = autosaveUuid;          
        }
      }, enable_autosave);
    }
  };

  fetchAll(getDuplicateAttributeQuery(height_id, "'AreaCode', 'Context ID'"), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();
      //excludeAttributes.add("AreaCode");
      //excludeAttributes.add("Site Code");
      duplicateTabGroup("Height", null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

/*** GPS ***/

updateGPSDiagnostics() {
    String status = "";
    String previousStatus = getFieldValue("control/data/GPS_Diagnostics");
    String notInitialised = "{GPS_is_not_initialised}";

    // Check if GPS is initialised or was previously initialised.
    if (!isExternalGPSOn() && !isInternalGPSOn()) {
        if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) {
            // previous gps status is some last valid coordinate.
            String error = "{GPS_is_no_longer_initialised}. {Previous_status}:";
            // check that error message wasn't previously appended to the previous status message.
            if (previousStatus.length() < error.length() ||
                    previousStatus.subSequence(0, error.length()).equals(error)) {
                status = previousStatus;
            } else {
                status = error + "\n" + previousStatus;
            }
        } else {
            status = notInitialised;
        }
    } else {
        status += "{Internal_GPS}: ";
        if (isInternalGPSOn())
        {
            status += "{on}";
        } else {
            status += "{off}";
        }
        status += "\nExternal GPS: ";
        if (isExternalGPSOn())
        {
            if (isBluetoothConnected()) {
                status += "{on_and_bluetooth_connected}";
            } else {
                status += "{on_and_bluetooth_disconnected}";
            }
        } else {
            status += "{off}";
        }
        Object position = getGPSPosition();
        if (position != null) {
            Object projPosition = getGPSPositionProjected();
            status += "\n{Latitude}: " + position.getLatitude();
            status += "   {Longitude}: " + position.getLongitude();
            status += "\n{Northing}: " + projPosition.getLatitude();
            status += "   {Easting}: " + projPosition.getLongitude();
            status += "\n{Accuracy}: " + getGPSEstimatedAccuracy();
        } else {
            status += "\n{Position}: {no_GPS_position_could_be_found}";
        }
    }
    setFieldValue("control/data/GPS_Diagnostics", status);
}


/*** SYNC ***/
setSyncMinInterval(5.0f);
setSyncMaxInterval(600.0f);
setSyncDelay(5.0f);

// TODO: Delete this paragraph after development is complete.
/*setSyncMinInterval(4.0f);
setSyncMaxInterval(6.0f);
setSyncDelay(5.0f);*/
setSyncEnabled(true);
setFileSyncEnabled(true);


/*** 'Uneditable' - you can edit the code below with extreme precaution ***/

/*** USER ***/


populateListForUsers(){
    // Populate user dropdown

    String getNonDeletedUsersQuery = "SELECT userid, fname || ' ' || lname "+
                                     "  FROM user "+
                                     " WHERE userdeleted is null;";

    fetchAll(getNonDeletedUsersQuery, new FetchCallback() {
        onFetch(result) {
            populateDropDown("user/usertab/users", result, true);
            String userQ = localSettingsQuery("User_VocabID");
            fetchOne(userQ, new FetchCallback() {
              onFetch(result) {
                if (!isNull(result)) {
                  setFieldValue("user/usertab/users", result.get(0));
                }
              }  
            });
        }
    });
}

String username = "";
String device = "";
String areaCode = "";

login(){
    if(isNull(getFieldValue("user/usertab/Area_Code")) || isNull(getFieldValue("user/usertab/users")) || isNull(getFieldValue("user/usertab/Device_Code"))){
        showWarning("{Warning}", "{Please_select_a_User_and_an_Trench_and_a_Device_Code_before_logging_in}");
        return;
    } else {
        String userVocabId = getFieldValue("user/usertab/users");
        fetchOne("SELECT userid,fname,lname,email FROM user WHERE userid='" + userVocabId + "';", new FetchCallback() {
            onFetch(result) {
                user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
                setUser(user);
                username = result.get(1) + " " + result.get(2);

                showTabGroup("control");
            }

        });

        // store the user and area code into local settings, and set the globals
        areaCode = getFieldValue("user/usertab/Area_Code");
        device = getFieldValue("user/usertab/Device_Code");
        saveLoginDetails();
    }
}

saveLoginDetails() {
  fetchOne("REPLACE INTO localSettings(key, value) VALUES('User_VocabID', '"+getFieldValue("user/usertab/users")+"');");
  fetchOne("REPLACE INTO localSettings(key, value) VALUES('AreaCode_VocabID', '"+getFieldValue("user/usertab/Area_Code")+"');");
  fetchOne("REPLACE INTO localSettings(key, value) VALUES('DeviceCode_VocabID', '"+getFieldValue("user/usertab/Device_Code")+"');");
  fetchOne("REPLACE INTO localsettings(key, value) SELECT 'AreaCode_VocabName', vocabname FROM vocabulary WHERE vocabid = "+getFieldValue("user/usertab/Area_Code")+";");
  fetchOne("REPLACE INTO localsettings(key, value) SELECT 'DeviceCode_VocabName', vocabname FROM vocabulary WHERE vocabid = "+getFieldValue("user/usertab/Device_Code")+";");
}

localSettingsQuery(String key) {
  return "select vocabid, vocabname from vocabulary join localSettings on (value=vocabid) where key = '"+key+"' ";
}

insertIntoLocalSettings(String key, String val) {
    fetchOne("REPLACE INTO localSettings(key, value) VALUES('" + key + "', '" + val + "');");
}
insertIntoLocalSettings(String key, Integer val) {
    insertIntoLocalSettings(key, Integer.toString(val));
}

loadLoginDetails() {
  String userQ = localSettingsQuery("User_VocabID");
  String areaCodeQ = localSettingsQuery("AreaCode_VocabID");
  String deviceCodeQ = localSettingsQuery("DeviceCode_VocabID");
  fetchOne(userQ, new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        setFieldValue("user/usertab/users", result.get(0));
      }
    }  
  });
  fetchOne(areaCodeQ, new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        setFieldValue("user/usertab/Area_Code", result.get(0));
      }
    }  
  });
  fetchOne(deviceCodeQ, new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        setFieldValue("user/usertab/Device_Code", result.get(0));
      }
    }  
  });
}

onEvent("user", "load", "loadLoginDetails()");
onEvent("user", "show", "removeNavigationButtons()");
onEvent("user/usertab/", "show", "populateListForUsers()");
onEvent("user/usertab/login", "click", "login()");
onEvent("user/usertab/guide", "click", "showTab(\"user/help\")");

/*** end user login code ***/


/*** MISC ***/

/** Vocab Population -- copied from lake mungo.**/
/** Wrapper for to make a vocab without an exlusion list **/
makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/*** 'Editable' - you can edit the code below based on the needs ***/
/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions) {
    makeVocab(type, path, attrib, vocabExclusions, null);
}

/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions, String callbackFunction){
  if (isNull(type) || isNull(path) || isNull(attrib)) {
    Log.e("makeVocab()", "Can't make populate a vocab when the given type, path or attribute is Null");
    return;
  }

  if (type.equals("PictureGallery")) {
    String pictureGalleryQuery = "SELECT vocabid, vocabname, pictureurl "+
                                 "  FROM vocabulary "+
                                 "  LEFT OUTER JOIN attributekey USING (attributeid) "+
                                 " WHERE attributename = '" + attrib + "' "+
                                 " ORDER BY  vocabcountorder;";
    fetchAll(pictureGalleryQuery, new FetchCallback() {
      onFetch(pictures) {
        populatePictureGallery(path, pictures);
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
    return;
  }

  if (type.equals("HierarchicalPictureGallery")) {
    populateHierarchicalPictureGallery(path, attrib);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  if (type.equals("HierarchicalDropDown")) {
    // populateHierarchicalDropDown(path, attrib);
    populateHierarchicalDropDown(path, attrib, true);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  String getAttributeVocabQuery = "SELECT vocabid, vocabname "+
                                  "  FROM vocabulary "+
                                  "  JOIN attributekey USING (attributeid) "+
                                  " WHERE attributename = '" + attrib + "' "+
                                  " ORDER BY vocabcountorder;";
  fetchAll(getAttributeVocabQuery,
    new FetchCallback() {
      onFetch(result) {
        // print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        // print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          // populateDropDown(path, result);
          populateDropDown(path, result, true);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
}

/** Entity Relationship Saving **/
/** Saves two entity id's as a relation. **/
saveEntitiesToRel(String type, String entity1, String entity2) {
    String callback = null;
    saveEntitiesToRel(type, entity1, entity2, callback);
}

/** Saves two entity id's as a relation with some callback executed. **/
saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
    String e1verb = null;
    String e2verb = null;
    saveEntitiesToHierRel(type, entity1, entity2, e1verb, e2verb, callback);
}

/** Saves two entity id's as a hierachical relation with some callback executed. **/
saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb, String callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, e1verb);
            addReln(entity2, rel_id, e2verb);
            if(!isNull(callback)) {
               execute(callback);
            }
        }
        onError(message) {
            Log.e("saveEntitiesToHierRel", message);
            showToast(message);
        }
    });
}

setTimestamp(String path) {
    setFieldValue(path, new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z").format(new Date()));
}

setMonthDay(String path) {
    setFieldValue(path, new java.text.SimpleDateFormat("MMM dd").format(new Date()));
}

/** MODULE INITIALISATION **/

// Stuff that needs to happen after everything.
initialiseModule() {
    makeVocab("DropDown", "user/usertab/Area_Code", "AreaCode");
    makeVocab("DropDown", "user/usertab/Device_Code", "Device Code");
    makeVocab("DropDown", "control/search/Area_Code", "AreaCode");
    loadContextAttributes();
    loadHeightAttributes();
    loadContextGroupAttributes();
    loadDiaryAttributes();
    loadSampleAttributes();
    loadSpecialFindAttributes();
    loadPhotoLogAttributes();
}

initialiseModule();
    CONTEXT_TYPE_VOCAB = new ArrayList();
    fetchVocabulary("Context Type", CONTEXT_TYPE_VOCAB);
